<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/util
              http://www.springframework.org/schema/util/spring-util.xsd
              http://www.springframework.org/schema/task
              http://www.springframework.org/schema/task/spring-task.xsd">

  <context:property-placeholder/>
  <context:annotation-config/>

  <task:scheduled-tasks scheduler="scheduler">
      <task:scheduled ref="user-manager" method="gc" cron="0 47 * * * *"/>
  </task:scheduled-tasks>

  <!-- Convert properties with multiple values separated by comma into an array of strings:
       key=value1,value2,value3 : String[] {value1, value2, value3}
    -->
  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
      <map>
        <entry key="java.lang.String[]"
               value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor"/>
      </map>
    </property>
  </bean>

  <!--
       DCACHE CELL COMMUNICATION
       =====================================================================================
    -->

  <bean id="noroutetocell" class="org.dcache.cells.LogNoRouteToCellExceptionReceiver">
      <description>Undeliverable message logger</description>
      <property name="excludedDestinations"
                value="${srm.loginbroker.update-topic},${srm.credential-service.topic}"/>
  </bean>

  <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pool manager communication stub</description>
    <property name="destination" value="${srm.service.poolmanager}"/>
    <property name="timeout" value="${srm.service.poolmanager.timeout}"/>
    <property name="timeoutUnit" value="${srm.service.poolmanager.timeout.unit}"/>
    <property name="retryOnNoRouteToCell" value="true"/>
  </bean>

  <bean id="gplazma-stub" class="org.dcache.cells.CellStub">
    <description>gPlazma communication stub</description>
    <property name="destination" value="${srm.service.gplazma}"/>
    <property name="timeout" value="${srm.service.gplazma.timeout}" />
    <property name="timeoutUnit" value="${srm.service.gplazma.timeout.unit}" />
  </bean>

  <bean id="billing-stub" class="org.dcache.cells.CellStub">
    <description>Billing communication stub</description>
    <property name="destination" value="${srm.service.billing}"/>
  </bean>

  <bean id="space-manager-stub" class="org.dcache.cells.CellStub">
    <description>Space manager communication stub</description>
    <property name="destination" value="${srm.service.spacemanager}" />
    <property name="timeout" value="${srm.service.spacemanager.timeout}"  />
    <property name="timeoutUnit" value="${srm.service.spacemanager.timeout.unit}"  />
  </bean>

  <bean id="transfer-manager-stub" class="org.dcache.cells.CellStub">
    <description>Transfer manager communication stub</description>
    <property name="destination" value="${srm.service.transfermanager}" />
    <property name="timeout" value="${srm.service.transfermanager.timeout}" />
    <property name="timeoutUnit" value="${srm.service.transfermanager.timeout.unit}" />
  </bean>

  <bean id="copy-manager-stub" class="org.dcache.cells.CellStub">
    <description>Copy manager communication stub</description>
    <property name="destination" value="${srm.service.copymanager}" />
    <property name="timeout" value="${srm.service.copymanager.timeout}" />
    <property name="timeoutUnit" value="${srm.service.copymanager.timeout.unit}" />
  </bean>

  <bean id="pin-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pin manager communication stub</description>
    <property name="destination" value="${srm.service.pinmanager}" />
    <property name="timeout" value="${srm.service.pinmanager.timeout}" />
    <property name="timeoutUnit" value="${srm.service.pinmanager.timeout.unit}" />
  </bean>

  <bean id="credential-service-stub" class="org.dcache.cells.CellStub">
    <description>Pin manager communication stub</description>
    <property name="destination" value="${srm.credential-service.topic}"/>
  </bean>

  <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
    <description>PNFS manager communication stub</description>
    <property name="destination" value="${srm.service.pnfsmanager}"/>
    <property name="timeout" value="${srm.service.pnfsmanager.timeout}"/>
    <property name="timeoutUnit" value="${srm.service.pnfsmanager.timeout.unit}"/>
    <property name="retryOnNoRouteToCell" value="true"/>
  </bean>

  <bean id="pnfs" class="diskCacheV111.util.PnfsHandler">
    <description>PNFS manager client module</description>
    <constructor-arg ref="pnfs-stub"/>
  </bean>

  <bean id="list-handler" class="org.dcache.util.list.ListDirectoryHandler">
    <description>Client stub for directory listing</description>
    <constructor-arg ref="pnfs"/>
  </bean>

  <bean id="scheduledExecutor" class="java.util.concurrent.Executors"
        factory-method="newSingleThreadScheduledExecutor"
        destroy-method="shutdown">
      <description>Thread pool for scheduled activities</description>
  </bean>

  <bean id="scheduler" class="org.springframework.scheduling.concurrent.ConcurrentTaskScheduler">
      <description>Scheduler for periodic activities</description>
      <property name="scheduledExecutor" ref="scheduledExecutor"/>
  </bean>

  <bean id="login-broker-source" class="dmg.cells.services.login.LoginBrokerSubscriber">
      <property name="topic" value="${srm.loginbroker.request-topic}"/>
      <property name="tags" value="${srm.protocols.tags}"/>
  </bean>

  <bean id="lb" class="dmg.cells.services.login.LoginBrokerPublisher">
    <description>Registers the door with a LoginBroker</description>
    <property name="executor" ref="scheduledExecutor"/>
    <property name="updateTime" value="${srm.loginbroker.update-period}"/>
    <property name="updateTimeUnit" value="${srm.loginbroker.update-period.unit}"/>
    <property name="updateThreshold" value="${srm.loginbroker.update-threshold}"/>
    <property name="protocolEngine" value="diskCacheV111.srm.dcache.Storage"/>
    <property name="protocolVersion" value="${srm.loginbroker.version}"/>
    <property name="protocolFamily" value="${srm.loginbroker.family}"/>
    <property name="address" value="#{ '${srm.net.listen}'.equals('any') ? null : '${srm.net.listen}' }"/>
    <property name="port" value="${srm.net.port}"/>
    <property name="topic" value="${srm.loginbroker.update-topic}"/>
    <property name="tags" value="#{ T(com.google.common.base.Splitter).on(',').omitEmptyStrings().splitToList('${srm.loginbroker.tags}') }"/>
    <property name="root" value="${srm.root}"/>
    <property name="readPaths" value="#{ T(java.util.Arrays).asList('/') }"/>
    <property name="writePaths" value="#{ T(java.util.Arrays).asList('/') }"/>
    <property name="loadProvider">
        <bean class="diskCacheV111.srm.dcache.SrmLoadProvider">
            <property name="srm" ref="srm"/>
        </bean>
    </property>
  </bean>

    <bean id="pool-monitor" class="org.dcache.poolmanager.RemotePoolMonitor">
        <description>Maintains runtime information about all pools</description>
        <property name="poolManagerStub" ref="pool-manager-stub"/>
    </bean>

  <!--
       AUTHORIZATION
       =====================================================================================
    -->

  <bean id="login-strategy" class="org.dcache.auth.CachingLoginStrategy">
    <description>Caching gPlazma client</description>
    <constructor-arg>
      <bean class="org.dcache.services.login.RemoteLoginStrategy">
        <property name="cellStub" ref="gplazma-stub"/>
      </bean>
    </constructor-arg>
    <constructor-arg value="${srm.service.gplazma.cache.size}"/> <!-- Cache size -->
    <constructor-arg value="${srm.service.gplazma.cache.timeout}"/>
    <constructor-arg value="${srm.service.gplazma.cache.timeout.unit}"/>
  </bean>

  <bean id="user-manager" class="diskCacheV111.srm.dcache.PersistentLoginUserManager">
    <description>gPlazma plugin for SRM</description>
    <constructor-arg ref="login-strategy"/>
    <constructor-arg ref="data-source"/>
  </bean>

    <bean id="voms-validator" class="org.italiangrid.voms.VOMSValidators"
          factory-method="newValidator" destroy-method="shutdown">
        <description>Validator for VOMS attribute certificates</description>
        <constructor-arg>
            <bean class="org.italiangrid.voms.store.VOMSTrustStores" factory-method="newTrustStore">
                <constructor-arg><list><value>${srm.authn.vomsdir}</value></list></constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.italiangrid.voms.util.CertificateValidatorBuilder" factory-method="buildCertificateValidator"
                    destroy-method="dispose">
                <constructor-arg value="${srm.authn.capath}"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="srm-credential-store"
          class="org.dcache.srm.request.sql.DatabaseRequestCredentialStorage">
        <description>SRM credential store</description>

        <constructor-arg ref="config"/>
    </bean>

  <!--
       CORE SRM
       =====================================================================================
    -->

  <bean id="storage" class="diskCacheV111.srm.dcache.Storage">
    <description>dCache plugin for SRM</description>
    <property name="executor">
        <bean class="org.dcache.util.CDCExecutorServiceDecorator"
              destroy-method="shutdown">
                <constructor-arg>
                    <bean class="java.util.concurrent.Executors"
                          factory-method="newCachedThreadPool"/>
                </constructor-arg>
        </bean>
    </property>
    <property name="directoryListSource" ref="list-handler"/>
    <property name="loginBrokerSource" ref="login-broker-source"/>
    <property name="pnfsStub" ref="pnfs-stub"/>
    <property name="pnfsHandler" ref="pnfs"/>
    <property name="poolManagerStub" ref="pool-manager-stub"/>
    <property name="poolMonitor" ref="pool-monitor"/>
    <property name="spaceManagerStub" ref="space-manager-stub"/>
    <property name="transferManagerStub" ref="transfer-manager-stub"/>
    <property name="copyManagerStub" ref="copy-manager-stub"/>
    <property name="pinManagerStub" ref="pin-manager-stub"/>
    <property name="billingStub" ref="billing-stub"/>
    <property name="isSpaceManagerEnabled"
              value="${srm.enable.space-reservation}"/>
    <property name="numberOfDoorsInRandomSelection"
              value="${srm.protocols.population-size}"/>
    <property name="useCustomGetHostByAddress"
              value="${srm.enable.custom-get-host-by-address}"/>
    <property name="configuration" ref="config"/>
    <property name="pinOnlineFiles" value="${srm.enable.pin-online-files}"/>
    <property name="srmPutNotSupportedProtocols" value="${srm.protocols.disallowed.put}"/>
    <property name="srmGetNotSupportedProtocols" value="${srm.protocols.disallowed.get}"/>
    <property name="srmPreferredProtocols" value="${srm.protocols.preferred}"/>
    <property name="verificationRequired" value="${srm.enable.third-party.requiring-verification-by-default}"/>
  </bean>

  <bean id="config" class="diskCacheV111.srm.dcache.Configuration" depends-on="liquibase">
    <description>SRM configuration</description>
    <property name="port" value="${srm.net.port}"/>
    <property name="timeout"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.limits.external-copy-script.timeout},
                     '${srm.limits.external-copy-script.timeout.unit}')}" />
    <property name="versions" value="${srm.version}"/>
    <property name="srmHost" value="${srm.net.host}"/>
    <property name="srmHostsAsArray" value="${srm.net.local-hosts}"/>
    <property name="caCertificatePath" value="${srm.authn.capath}"/>
    <property name="vomsdir" value="${srm.authn.vomsdir}"/>
    <property name="sizeOfSingleRemoveBatch"
              value="${srm.limits.remove-batch-size}"/>
    <property name="maxNumberOfLsEntries"
              value="#{T(org.dcache.commons.util.Strings).parseInt('${srm.limits.ls.entries}')}"/>
    <property name="maxNumberOfLsLevels"
              value="#{T(org.dcache.commons.util.Strings).parseInt('${srm.limits.ls.levels}')}"/>
    <property name="authzCacheLifetime"
              value="#{T(java.util.concurrent.TimeUnit).
                     SECONDS.convert(
                     ${srm.service.gplazma.cache.timeout},
                     '${srm.service.gplazma.cache.timeout.unit}')}" />
    <property name="srm_root" value="${srm.root}"/>
    <property name="buffer_size" value="${srm.limits.transfer-buffer.size}"/>
    <property name="tcp_buffer_size" value="${srm.limits.transfer-tcp-buffer.size}"/>
    <property name="parallel_streams" value="${srm.limits.parallel-streams}"/>
    <property name="debug" value="${srm.enable.external-copy-script.debug}"/>
    <property name="gsiftpclinet" value="globus-url-copy"/>
    <property name="getLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.get.lifetime},
                     '${srm.request.get.lifetime.unit}')}" />
    <property name="bringOnlineLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.bring-online.lifetime},
                     '${srm.request.bring-online.lifetime.unit}')}" />
    <property name="putLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.put.lifetime},
                     '${srm.request.put.lifetime.unit}')}" />
    <property name="copyLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.copy.lifetime},
                     '${srm.request.copy.lifetime.unit}')}" />
    <property name="recursiveDirectoryCreation"
              value="${srm.enable.recursive-directory-creation}"/>
    <property name="advisoryDelete" value="${srm.enable.advisory-delete}"/>

    <property name="getMaxPollPeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.get.max-poll-period},
                     '${srm.request.get.max-poll-period.unit}')}" />
    <property name="getSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.get.switch-to-async-mode-delay}',
                     '${srm.request.get.switch-to-async-mode-delay.unit}')}"/>
    <property name="bringOnlineMaxPollPeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.bring-online.max-poll-period},
                     '${srm.request.bring-online.max-poll-period.unit}')}" />
    <property name="bringOnlineSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.bring-online.switch-to-async-mode-delay}',
                     '${srm.request.bring-online.switch-to-async-mode-delay.unit}')}"/>
    <property name="lsMaxPollPeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.ls.max-poll-period},
                     '${srm.request.ls.max-poll-period.unit}')}" />
    <property name="lsSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.ls.switch-to-async-mode-delay}',
                     '${srm.request.ls.switch-to-async-mode-delay.unit}')}"/>
    <property name="putMaxPollPeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.put.max-poll-period},
                     '${srm.request.put.max-poll-period.unit}')}" />
    <property name="putSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.put.switch-to-async-mode-delay}',
                     '${srm.request.put.switch-to-async-mode-delay.unit}')}"/>
    <property name="copyMaxPollPeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.copy.max-poll-period},
                     '${srm.request.copy.max-poll-period.unit}')}" />
    <property name="reserveSpaceMaxPollPeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.reserve-space.max-poll-period},
                     '${srm.request.reserve-space.max-poll-period.unit}')}" />

    <property name="maxQueuedJdbcTasksNum"
              value="${srm.limits.db.queue}"/>
    <property name="jdbcExecutionThreadNum"
              value="${srm.limits.db.threads}"/>
    <property name="credentialsDirectory"
              value="${srm.user.credentials.directory}"/>
    <property name="overwrite" value="${srm.enable.overwrite}"/>
    <property name="overwrite_by_default" value="${srm.enable.overwrite-by-default}"/>
    <property name="clientDNSLookup" value="${srm.enable.client-dns-lookup}"/>
    <property name="gsissl" value="true"/>
    <property name="clientTransportByName" value="${srm.client-transport}"/>
    <property name="qosPluginClass" value="${srm.plugins.qos.class}"/>
    <property name="qosConfigFile" value="${srm.plugins.qos.config.file}"/>
    <property name="dataSource" ref="data-source"/>
    <property name="transactionManager" ref="tx-manager"/>

    <property name="databaseParametersForList.databaseEnabled"
              value="${srm.persistence.ls.enable}"/>
    <property name="databaseParametersForList.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.ls.remove-expired-period},
                     '${srm.persistence.ls.remove-expired-period.unit}')}" />
    <property name="databaseParametersForList.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.ls.keep-history-period},
                     '${srm.persistence.ls.keep-history-period.unit}')}" />
    <property name="databaseParametersForList.requestHistoryDatabaseEnabled"
              value="${srm.persistence.ls.enable.history}"/>
    <property name="databaseParametersForList.cleanPendingRequestsOnRestart"
              value="${srm.persistence.ls.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForList.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.ls.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForGet.databaseEnabled"
              value="${srm.persistence.get.enable}"/>
    <property name="databaseParametersForGet.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.get.remove-expired-period},
                     '${srm.persistence.get.remove-expired-period.unit}')}" />
    <property name="databaseParametersForGet.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.get.keep-history-period},
                     '${srm.persistence.get.keep-history-period.unit}')}" />
    <property name="databaseParametersForGet.requestHistoryDatabaseEnabled"
              value="${srm.persistence.get.enable.history}"/>
    <property name="databaseParametersForGet.cleanPendingRequestsOnRestart"
              value="${srm.persistence.get.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForGet.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.get.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForPut.databaseEnabled"
              value="${srm.persistence.put.enable}"/>
    <property name="databaseParametersForPut.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.put.remove-expired-period},
                     '${srm.persistence.put.remove-expired-period.unit}')}" />
    <property name="databaseParametersForPut.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.put.keep-history-period},
                     '${srm.persistence.put.keep-history-period.unit}')}" />
    <property name="databaseParametersForPut.requestHistoryDatabaseEnabled"
              value="${srm.persistence.put.enable.history}"/>
    <property name="databaseParametersForPut.cleanPendingRequestsOnRestart"
              value="${srm.persistence.put.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForPut.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.put.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForCopy.databaseEnabled"
              value="${srm.persistence.copy.enable}"/>
    <property name="databaseParametersForCopy.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.copy.remove-expired-period},
                     '${srm.persistence.copy.remove-expired-period.unit}')}" />
    <property name="databaseParametersForCopy.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.copy.keep-history-period},
                     '${srm.persistence.copy.keep-history-period.unit}')}" />
    <property name="databaseParametersForCopy.requestHistoryDatabaseEnabled"
              value="${srm.persistence.copy.enable.history}"/>
    <property name="databaseParametersForCopy.cleanPendingRequestsOnRestart"
              value="${srm.persistence.copy.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForCopy.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.copy.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForBringOnline.databaseEnabled"
              value="${srm.persistence.bring-online.enable}"/>
    <property name="databaseParametersForBringOnline.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.bring-online.remove-expired-period},
                     '${srm.persistence.bring-online.remove-expired-period.unit}')}"/>
    <property name="databaseParametersForBringOnline.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.bring-online.keep-history-period},
                     '${srm.persistence.bring-online.keep-history-period.unit}')}" />
    <property name="databaseParametersForBringOnline.requestHistoryDatabaseEnabled"
              value="${srm.persistence.bring-online.enable.history}"/>
    <property name="databaseParametersForBringOnline.cleanPendingRequestsOnRestart"
              value="${srm.persistence.bring-online.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForBringOnline.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.bring-online.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForReserve.databaseEnabled"
              value="${srm.persistence.reserve-space.enable}"/>
    <property name="databaseParametersForReserve.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.reserve-space.remove-expired-period},
                     '${srm.persistence.reserve-space.remove-expired-period.unit}')}" />
    <property name="databaseParametersForReserve.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.reserve-space.keep-history-period},
                     '${srm.persistence.reserve-space.keep-history-period.unit}')}" />
    <property name="databaseParametersForReserve.requestHistoryDatabaseEnabled"
              value="${srm.persistence.reserve-space.enable.history}"/>
    <property name="databaseParametersForReserve.cleanPendingRequestsOnRestart"
              value="${srm.persistence.reserve-space.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForReserve.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.reserve-space.enable.store-transient-state}'.equals('false') ? true : false }"/>
    <property name="pingExtraInfo">
	<bean class="org.dcache.util.ConfigurationMapFactoryBean">
	    <property name="prefix" value="srm.ping-extra-info"/>
	</bean>
    </property>
    <property name="minimumBandwidth" value="${srm.minimum-bandwidth}"/>
  </bean>

  <bean id="scheduling-strategy-provider" class="org.dcache.srm.scheduler.SchedulingStrategyFactoryBean">
      <property name="name" value="${srm.plugins.scheduler}"/>
      <property name="configuration">
          <bean class="org.dcache.util.ConfigurationMapFactoryBean">
              <property name="prefix" value="srm.scheduler.${srm.plugins.scheduler}"/>
          </bean>
      </property>
  </bean>

  <bean id="transfer-strategy-provider" class="org.dcache.srm.scheduler.TransferStrategyFactoryBean">
      <property name="name" value="${srm.plugins.transfer}"/>
      <property name="configuration">
          <bean class="org.dcache.util.ConfigurationMapFactoryBean">
              <property name="prefix" value="srm.transfer.${srm.plugins.transfer}"/>
          </bean>
      </property>
  </bean>

  <bean id="scheduler-get" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for GET operations</description>

      <constructor-arg value="get_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.GetFileRequest"/>

      <property name="schedulingStrategyProvider" ref="scheduling-strategy-provider"/>
      <property name="transferStrategyProvider" ref="transfer-strategy-provider"/>
      <property name="maxRequests" value="${srm.request.get.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.get.max-inprogress}"/>
      <property name="maxReadyJobs" value="${srm.request.get.max-transfers}"/>
  </bean>


  <bean id="scheduler-ls" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for LS operations</description>

      <constructor-arg value="ls_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.LsFileRequest"/>

      <property name="schedulingStrategyProvider" ref="scheduling-strategy-provider"/>
      <property name="transferStrategyProvider" ref="transfer-strategy-provider"/>
      <property name="maxRequests" value="${srm.request.ls.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.ls.max-inprogress}"/>
  </bean>


  <bean id="scheduler-bringonline" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for BRING-ONLINE operations</description>

      <constructor-arg value="bring_online_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.BringOnlineFileRequest"/>

      <property name="schedulingStrategyProvider" ref="scheduling-strategy-provider"/>
      <property name="transferStrategyProvider" ref="transfer-strategy-provider"/>
      <property name="maxRequests" value="${srm.request.bring-online.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.bring-online.max-inprogress}"/>
  </bean>


  <bean id="scheduler-put" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for PUT operations</description>

      <constructor-arg value="put_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.PutFileRequest"/>

      <property name="schedulingStrategyProvider" ref="scheduling-strategy-provider"/>
      <property name="transferStrategyProvider" ref="transfer-strategy-provider"/>
      <property name="maxRequests" value="${srm.request.put.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.put.max-inprogress}"/>
      <property name="maxReadyJobs" value="${srm.request.put.max-transfers}"/>
  </bean>

  <bean id="scheduler-copy" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for COPY operations</description>

      <constructor-arg value="copy_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.Job"/>

      <property name="schedulingStrategyProvider" ref="scheduling-strategy-provider"/>
      <property name="transferStrategyProvider" ref="transfer-strategy-provider"/>
      <property name="maxRequests" value="${srm.request.copy.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.copy.max-inprogress}"/>
  </bean>

  <bean id="scheduler-reserve-space" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for RESERVE-SPACE operations</description>

      <constructor-arg value="reserve_space_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.ReserveSpaceRequest"/>

      <property name="schedulingStrategyProvider" ref="scheduling-strategy-provider"/>
      <property name="transferStrategyProvider" ref="transfer-strategy-provider"/>
      <property name="maxRequests" value="${srm.request.reserve-space.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.reserve-space.max-inprogress}"/>
  </bean>


  <bean id="schedulers" class="org.dcache.srm.scheduler.SchedulerContainer">
      <description>Collection of schedulers</description>

      <property name="schedulers">
	  <list>
	      <ref bean="scheduler-get"/>
	      <ref bean="scheduler-ls"/>
	      <ref bean="scheduler-put"/>
	      <ref bean="scheduler-bringonline"/>
	      <ref bean="scheduler-reserve-space"/>
	      <!-- COPY scheduler must be last in list as it has type Job.class -->
	      <ref bean="scheduler-copy"/>
	  </list>
      </property>
  </bean>

  <bean id="srm" class="org.dcache.srm.SRM" init-method="start" destroy-method="stop">
    <description>SRM engine</description>
    <constructor-arg ref="config"/>
    <constructor-arg ref="storage"/>
    <property name="schedulers" ref="schedulers"/>
    <property name="requestCredentialStorage" ref="srm-credential-store"/>
    <property name="srmUserPersistenceManager" ref="user-manager"/>
  </bean>

  <bean id="srm-cli" class="org.dcache.srm.SrmCommandLineInterface">
    <property name="configuration" ref="config"/>
    <property name="srm" ref="srm"/>
  </bean>

  <bean id="thread-pool" class="org.eclipse.jetty.util.thread.QueuedThreadPool">
      <!-- Note that Jetty manages the lifecycle of this thread pool -->
      <description>Thread pool used by Jetty for request processing</description>

      <constructor-arg value="${srm.limits.jetty.threads.max}"/>
      <constructor-arg value="${srm.limits.jetty.threads.min}"/>
      <constructor-arg
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty.threads.idle-time.max},
                     '${srm.limits.jetty.threads.idle-time.max.unit}')}" />
      <constructor-arg>
              <bean class="org.eclipse.jetty.util.BlockingArrayQueue">
                  <constructor-arg value="${srm.limits.jetty.threads.queued.max}"/>
              </bean>
      </constructor-arg>

      <property name="name" value="jetty-srm"/>
  </bean>

  <!--
       DATABASE
       =====================================================================================
    -->

    <bean id="data-source" class="org.dcache.db.AlarmEnabledDataSource" destroy-method="close">
        <description>Database connection pool</description>
        <constructor-arg value="${srm.db.url}"/>
        <constructor-arg value="Srm"/>
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariDataSource">
                <constructor-arg>
                    <bean class="com.zaxxer.hikari.HikariConfig">
                        <property name="jdbcUrl" value="${srm.db.url}"/>
                        <property name="username" value="${srm.db.user}"/>
                        <property name="password" value="#{ T(diskCacheV111.util.Pgpass).getPassword('${srm.db.password.file}', '${srm.db.url}', '${srm.db.user}', '${srm.db.password}') }"/>
                        <property name="minimumIdle" value="${srm.db.connections.idle}"/>
                        <property name="maximumPoolSize" value="${srm.db.connections.max}"/>
                        <property name="autoCommit" value="true"/>
                        <property name="transactionIsolation" value="TRANSACTION_READ_COMMITTED"/>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="liquibase" class="org.dcache.util.SpringLiquibase">
        <description>Database schema manager</description>
        <property name="dataSource" ref="data-source"/>
        <property name="changeLog" value="classpath:${srm.db.schema.changelog}"/>
        <property name="shouldUpdate" value="${srm.db.schema.auto}"/>
    </bean>

    <bean id="tx-manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          depends-on="liquibase">
        <description>Database transaction manager</description>
        <property name="dataSource" ref="data-source"/>
    </bean>

  <!--
       GRIDSITE DELEGATION
       =====================================================================================
   -->

    <bean id="gridsite-credential-delegation-store"
	class="org.dcache.gridsite.InMemoryCredentialDelegationStore"
	init-method="start">
      <description>Store for on-going GridSite delegations</description>

      <property name="expireAfter"
		value="#{T(java.util.concurrent.TimeUnit).MINUTES.toMillis(10)}"/>
      <property name="maxOngoing"
		value="10000"/>
  </bean>

  <bean id="gridsite-credential-store"
        class="org.dcache.gridsite.SrmCredentialStore">
      <description>Bridge between GridSite- and SRM- credential storage</description>

      <property name="requestCredentialStorage" ref="srm-credential-store"/>
      <property name="vomsValidator" ref="voms-validator"/>
  </bean>

  <bean id="gridsite-credential-delegation-factory"
	class="org.dcache.gridsite.BouncyCastleCredentialDelegationFactory">
      <description>Generation of GridSite delegated credentials that uses BouncyCastle</description>

      <property name="keyPairCache" ref="keypair-cache"/>
  </bean>

  <bean id="gridsite-credential-service" class="diskCacheV111.srm.CredentialService">
      <description>GridSite delegation service providing delegated credentials to other dCache services</description>
      <property name="credentialStore" ref="gridsite-credential-store"/>
      <property name="httpsPort" value="${srm.net.ssl-port}"/>
      <property name="host" value="${srm.net.host}"/>
      <property name="executor" ref="scheduledExecutor"/>
      <property name="topicStub" ref="credential-service-stub"/>
  </bean>

  <bean id="keypair-cache" class="org.dcache.gsi.KeyPairCache">
      <description>Cache of key-pairs to reduce delegation overhead</description>
      <constructor-arg value="${srm.authn.gsi.delegation.cache.lifetime}"/>
      <constructor-arg value="${srm.authn.gsi.delegation.cache.lifetime.unit}"/>
  </bean>

  <util:map id="gridsite-service-metadata">
      <description>Static key-value pairs provided through GridSite interface</description>

      <entry key="implementation" value="dCache"/>
  </util:map>

   <!--
        JETTY SERVER
        =====================================================================================
    -->

    <bean abstract="true" id="globus-connector" class="org.dcache.util.jetty.CanlConnectorFactoryBean">
        <property name="server" ref="server"/>

        <property name="host" value="#{ '${srm.net.listen}'.equals('any') ? null : '${srm.net.listen}' }"/>
        <property name="backlog" value="${srm.limits.jetty-connector.backlog}"/>
        <property name="idleTimeout" value="${srm.limits.jetty-connector.idle-time.max}"/>
        <property name="idleTimeoutUnit" value="${srm.limits.jetty-connector.idle-time.max.unit}"/>
        <property name="acceptors" value="${srm.limits.jetty-connector.acceptors}"/>

        <property name="needClientAuth" value="true"/>
        <property name="wantClientAuth" value="true"/>
        <property name="cipherFlags" value="${srm.authn.ciphers}"/>

        <property name="caPath" value="${srm.authn.capath}"/>
        <property name="caPathTimeout" value="${srm.authn.capath.refresh}"/>
        <property name="caPathTimeoutUnit" value="${srm.authn.capath.refresh.unit}"/>

        <property name="serverCertificatePath" value="${srm.authn.hostcert.cert}"/>
        <property name="serverKeyPath" value="${srm.authn.hostcert.key}"/>
        <property name="serverCertificateTimeout" value="${srm.authn.hostcert.refresh}"/>
        <property name="serverCertificateTimeoutUnit" value="${srm.authn.hostcert.refresh.unit}"/>

        <property name="namespaceMode" value="${srm.authn.namespace-mode}"/>
        <property name="crlCheckingMode" value="${srm.authn.crl-mode}"/>
        <property name="ocspCheckingMode" value="${srm.authn.ocsp-mode}"/>

        <property name="keyPairCache" ref="keypair-cache"/>
    </bean>

    <bean id="server" class="org.eclipse.jetty.server.Server"
        init-method="start" destroy-method="stop">
        <description>Jetty server hosting the SRM web application</description>

        <constructor-arg ref="thread-pool"/>

        <property name="stopTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                         ${srm.limits.jetty.graceful-shutdown},
                         '${srm.limits.jetty.graceful-shutdown.unit}')}"/>

        <property name="connectors">
            <list>
                <bean parent="globus-connector">
                    <description>GSI interface</description>
                    <property name="port" value="${srm.net.port}"/>
                    <property name="enableGsi" value="true"/>
                    <property name="usingLegacyClose" value="${srm.enable.legacy-close}"/>
                </bean>

                <bean parent="globus-connector">
                    <description>SSL interface</description>
                    <property name="port" value="${srm.net.ssl-port}"/>
                </bean>
            </list>
        </property>

        <property name="handler">
            <bean class="org.eclipse.jetty.server.handler.HandlerList">
                <property name="handlers">
                    <list>
                        <bean class="org.eclipse.jetty.webapp.WebAppContext">
                            <property name="contextPath" value="/srm"/>
                            <property name="war" value="${dcache.paths.share}/srm-webapp"/>
                            <property name="configurationClasses">
                                <list>
                                    <value>org.eclipse.jetty.webapp.WebInfConfiguration</value>
                                    <value>org.eclipse.jetty.plus.webapp.EnvConfiguration</value>
                                    <value>org.eclipse.jetty.plus.webapp.PlusConfiguration</value>
                                    <value>org.eclipse.jetty.webapp.WebXmlConfiguration</value>
                                </list>
                            </property>
                            <property name="attributes">
                                <bean class="org.dcache.util.jetty.ImmutableAttributesMap">
                                    <constructor-arg>
                                        <map>
                                          <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_CONFIG }"
                                                 value-ref="config"/>
                                          <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_STORAGE }"
                                                 value-ref="storage"/>
                                          <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_SRM }"
                                                 value-ref="srm"/>
                                          <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_AUTHORIZATION }"
                                                 value-ref="user-manager"/>
                                          <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_CREDENTIAL_STORE }"
                                     value-ref="gridsite-credential-store"/>
                                          <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_CREDENTIAL_DELEGATION_STORE }"
                                     value-ref="gridsite-credential-delegation-store"/>
                                          <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_CREDENTIAL_DELEGATION_FACTORY }"
                                     value-ref="gridsite-credential-delegation-factory"/>
                                          <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_SERVICE_METADATA }"
                                     value-ref="gridsite-service-metadata"/>
                                          <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_VOMS_VALIDATOR }"
                                     value-ref="voms-validator"/>
                                        </map>
                                    </constructor-arg>
                                </bean>
                            </property>
                        </bean>

                        <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
                    </list>
                </property>
            </bean>
        </property>

        <property name="beans">
            <list>
                <bean class="org.eclipse.jetty.server.LowResourceMonitor">
                    <constructor-arg ref="server"/>
                    <property name="lowResourcesIdleTimeout"
                              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                                  ${srm.limits.jetty-connector.low-resource.max.idle-time},
                                 '${srm.limits.jetty-connector.low-resource.max.idle-time.unit}')}"/>
                    <property name="maxLowResourcesTime" value="180000"/>
                </bean>
            </list>
        </property>
    </bean>
</beans>
