#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'tempfile'
require 'ansi/code'
require 'etc'
require 'open3'

include ANSI::Code

@globusUrlCopy = 'globus-url-copy'
@srmcp = 'srmcp'
@srmls = 'srmls'
@srmrm = 'srmrm'
@srmmv = 'srmmv'
@srmbringonline = 'srm-bring-online'
@srmmkdir = 'srmmkdir'
@srmrmdir = 'srmrmdir'
@srmcheck = 'srm-check-permissions'
@arccp = 'arccp'
@arcrm = 'arcrm'
@arcls = 'arcls'
@xrdcp = 'xrdcp'
@dccp = 'dccp'
@curl = 'curl'
@uberftp = 'uberftp'

@unique = Time.now.to_i
@count = 0
@truststore = File.expand_path("../../dcache/etc/grid-security/certificates", __FILE__)

def makeTempName
  "test-#{@unique}-#{@count += 1}"
end

def runExpectingStatus(expectedCode, *args)
  a = args.insert(1, "-D-").flatten
  puts yellow { a.join(" ") + " [=> #{expectedCode}]" }
  begin
    print faint
    stdin, stdout, stderr, wait_thr = Open3.popen3(*a)
    result = stdout.gets
    stdin.close
    stdout.close
    stderr.close
    if wait_thr.value != 0
      raise "Failed #{wait_thr.value}"
    end
    actualCode = result.scan(/[0-9]{3}/)[0].to_i
    if actualCode != expectedCode
      raise "Wrong status code: #{actualCode} != #{expectedCode}"
    end
  ensure
    print reset
  end
end

def run(*args)
  s = args.join(" ")
  puts yellow { s }
  begin
    print faint
    if not system(s)
      raise "Failed with exit code #{$?}"
    end
  ensure
    print reset
  end
end

def gridftp(source, dest, *args)
  tmp1 = makeTempName
  tmp2 = makeTempName
  run(@globusUrlCopy, args,
      "file:#{source}", "gsiftp://#{@options.host}/#{@options.dir}/#{tmp1}");
  run(@globusUrlCopy, args,
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp1}", "gsiftp://#{@options.host}/#{@options.dir}/#{tmp2}");
  run(@globusUrlCopy, args,
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp2}", "file:#{dest}");
end

def srmcp(source, dest, *args)
  tmp = makeTempName

  run(@srmmkdir, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}")
  run(@srmcp, args,
      "file:///#{source}",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/a")
  run(@srmcp, args,
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp}/a",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/b")
  run(@srmcp, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/b",
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp}/c")
  run(@srmcp, args,
      "http://#{@options.host}:2880/#{@options.dir}/#{tmp}/c",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/d")
  run(@srmcp, args,
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp}/d",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/e")
  run(@srmcp, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/e",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp}/f")
  run(@srmcp, args, '-pushmode=false',
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/f",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/g")
  run(@srmcp, args, '-pushmode=true',
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/g",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/h")
  run(@srmmv, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/h",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/i")
  run(@srmbringonline, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/i")
  run(@srmcp, args, '-streams_num=1',
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/i",
      "file:///#{dest}")
  run(@srmls, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/a")
  run(@srmcheck, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/a")
  run(@srmrm, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/a",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/b",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/c",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/d",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/e",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/f",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/g",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/i")
  run(@srmmkdir, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/dir1")
  run(@srmmkdir, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/dir1/dir11")
  run(@srmmkdir, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}/dir2")
  run(@srmrmdir, args, '-recursive',
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp}")
end

def arcSrm(source, dest, *args)
  tmp1 = makeTempName
  tmp2 = makeTempName
  tmp3 = makeTempName
  tmp4 = makeTempName

  run(@arccp, '-p', args,
      "#{source}",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp1}")
  run(@arccp, args,
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp1}",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp2}")
  run(@arccp, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp2}",
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp3}")
  run(@arccp, args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp3}",
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp4}")
  run(@arccp, '-p', args,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp4}",
      "#{dest}")
  run(@arcls,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp1}")
  run(@arcrm,
      "srm://#{@options.host}:8443/#{@options.dir}/#{tmp1}")
end

def arcHttps(source, dest, *args)
  tmp1 = makeTempName

  run(@arccp, args,
      "#{source}",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
  run(@arccp, args,
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}",
      "#{dest}")
  run(@arcls,
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
  run(@arcrm,
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
end

def xrootd(source, dest, *args)
  tmp1 = makeTempName

  run(@xrdcp, args,
      "#{source}",
      "root://#{@options.host}/#{@options.dir}/#{tmp1}")
  run(@xrdcp, args,
      "root://#{@options.host}/#{@options.dir}/#{tmp1}",
      "#{dest}")
end

def dcap(source, dest, *args)
  tmp1 = makeTempName

  run(@dccp, "-A", args,
      "#{source}",
      "dcap://#{@options.host}:22125/#{@options.dir}/#{tmp1}")
  run(@dccp, args,
      "dcap://#{@options.host}:22125/#{@options.dir}/#{tmp1}",
      "#{dest}")
end

def gsidcap(source, dest, *args)
  tmp1 = makeTempName

  run(@dccp, "-A", args,
      "#{source}",
      "gsidcap://#{@options.host}:22128/#{@options.dir}/#{tmp1}")
  run(@dccp, args,
      "gsidcap://#{@options.host}:22128/#{@options.dir}/#{tmp1}",
      "#{dest}")
end

def http(source, dest, *args)
  args << "-s"
  tmp1 = makeTempName
  runExpectingStatus(401, @curl, args, "-o", "/dev/null", "-L", "-T", source, "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")

  runExpectingStatus(403, @curl, args, "-o", "/dev/null", "-u", "readonly:password", "-L", "-T", source, "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")

  run(@curl, args, "-f", "-o", "/dev/null", "-u", "#{Etc.getlogin}:password", "-L", "-T", source, "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")

  run(@curl, args, "-f", "-L", "-o", dest, "-u", "#{Etc.getlogin}:password", "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-f", "-L", "-o", dest, "-u", "readonly:password", "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-f", "-L", "-o", dest, "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")

  runExpectingStatus(401, @curl, args, "-X", "DELETE", "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")

  runExpectingStatus(403, @curl, args, "-u", "readonly:password", "-X", "DELETE", "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")

  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-X", "DELETE", "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")
  runExpectingStatus(404, @curl, args, "-u", "#{Etc.getlogin}:password", "-X", "DELETE",
      "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")
  runExpectingStatus(404, @curl, args, "-X", "DELETE",
      "http://#{@options.host}:2880/#{@options.dir}/#{tmp1}")
end

def httpNoAnonymous(source, dest, *args)
  args << "-s"
  tmp1 = makeTempName
  runExpectingStatus(401, @curl, args, "-o", "/dev/null", "-L", "-T", source, "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")

  runExpectingStatus(403, @curl, args, "-o", "/dev/null", "-u", "readonly:password", "-L", "-T", source, "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-f", "-o", "/dev/null", "-u", "#{Etc.getlogin}:password", "-L", "-T", source, "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")

  runExpectingStatus(401, @curl, args, "-L", "-o", dest, "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-f", "-u", "readonly:password", "-L", "-o", dest, "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-L", "-o", dest, "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")

  runExpectingStatus(401, @curl, args, "-X", "DELETE", "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")

  runExpectingStatus(403, @curl, args, "-u", "readonly:password", "-X", "DELETE",
      "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-X", "DELETE", "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
  runExpectingStatus(404, @curl, args, "-u", "#{Etc.getlogin}:password", "-X", "DELETE",
      "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
  runExpectingStatus(401, @curl, args, "-X", "DELETE",
      "http://#{@options.host}:2882/#{@options.dir}/#{tmp1}")
end

def httpUserRootUpload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L" << "-f"
  tmp = makeTempName
  run(@curl, args, "-u", "usersroot:password", "-T", source, "https://#{@options.host}:2881/#{tmp}")
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-o", dest, "https://#{@options.host}:2881/users-root/#{tmp}")
end

def httpUserRootDownload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L" << "-f"
  tmp = makeTempName
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-T", source, "https://#{@options.host}:2881/users-root/#{tmp}")
  run(@curl, args, "-u", "usersroot:password", "-o", dest, "https://#{@options.host}:2881/#{tmp}")
end

def httpDoorRootUpload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L"
  tmp = makeTempName
  runExpectingStatus(403, @curl, args, "-u", "usersroot:password", "-T", source, "https://#{@options.host}:2883/#{tmp}")
  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-T", source, "https://#{@options.host}:2883/#{tmp}")
  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-o", dest, "https://#{@options.host}:2881/door-root/#{tmp}")
end

def httpDoorRootDownload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L"
  tmp = makeTempName
  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-T", source, "https://#{@options.host}:2881/door-root/#{tmp}")
  runExpectingStatus(403, @curl, args, "-u", "usersroot:password", "-T", source, "https://#{@options.host}:2883/#{tmp}")
  run(@curl, args, "-f", "-u", "#{Etc.getlogin}:password", "-o", dest, "https://#{@options.host}:2883/#{tmp}")
end

def httpUsersRootDoorRootUpload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L" << "-f"
  tmp = makeTempName
  run(@curl, args, "-u", "usersroot:password", "-T", source, "https://#{@options.host}:2884/#{tmp}")
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-o", dest, "https://#{@options.host}:2881/users-root/door-root/#{tmp}")
end

def httpUsersRootDoorRootDownload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L" << "-f"
  tmp = makeTempName
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-T", source, "https://#{@options.host}:2881/users-root/door-root/#{tmp}")
  run(@curl, args, "-u", "usersroot:password", "-o", dest, "https://#{@options.host}:2884/#{tmp}")
end


def httpDoorRootUsersRootUpload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L" << "-f"
  tmp = makeTempName
  run(@curl, args, "-u", "doorrootusersroot:password", "-T", source, "https://#{@options.host}:2883/#{tmp}")
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-o", dest, "https://#{@options.host}:2881/door-root/users-root/#{tmp}")
end

def httpDoorRootUsersRootDownload(source, dest, *args)
  args << "--capath" << @truststore << "-s" << "-L" << "-f"
  tmp = makeTempName
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-T", source, "https://#{@options.host}:2881/door-root/users-root/#{tmp}")
  run(@curl, args, "-u", "doorrootusersroot:password", "-o", dest, "https://#{@options.host}:2883/#{tmp}")
end

def https(source, dest, *args)
  args << "--capath" << @truststore << "-s"
  tmp1 = makeTempName
  runExpectingStatus(401, @curl, args, "-L", "-T", source,
                     "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")

  runExpectingStatus(403, @curl, args, "-u", "readonly:password", "-L", "-T", source,
                     "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-L", "-T", source,
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")

  run(@curl, args, "-L", "-o", dest,
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")

  runExpectingStatus(401, @curl, args, "-X", "DELETE",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")

  runExpectingStatus(403, @curl, args, "-u", "readonly:password", "-X", "DELETE",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
  run(@curl, args, "-u", "#{Etc.getlogin}:password", "-X", "DELETE",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")

  runExpectingStatus(404, @curl, args, "-u", "#{Etc.getlogin}:password", "-X", "DELETE",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
  runExpectingStatus(404, @curl, args, "-u", "readonly:password", "-X", "DELETE",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
  runExpectingStatus(404, @curl, args, "-X", "DELETE",
      "https://#{@options.host}:2881/#{@options.dir}/#{tmp1}")
end

def uberftp(source, dest, *args)
  tmp1 = makeTempName
  tmp2 = makeTempName

  run(@uberftp, args,
      "file:#{source}", "gsiftp://#{@options.host}/#{@options.dir}/#{tmp1}");
  run(@uberftp, args,
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp1}", "gsiftp://#{@options.host}/#{@options.dir}/#{tmp2}");
  run(@uberftp, args,
      "gsiftp://#{@options.host}/#{@options.dir}/#{tmp2}", "file:#{dest}");
end

def test(transfer, *args)
  tmp = Tempfile.new('dcache.test')
  begin
    start = Time.now

    File.delete(tmp.path)
    method(transfer).call(@options.file, tmp.path, *args)

    if FileUtils.compare_file(@options.file, tmp.path)
      puts "#{green { "Passed" }} #{blue { "#{Time.now - start}s" }}"
    else
      puts red { "Failed: #{@options.file} and #{tmp.path} are not identical" }
    end
  rescue => error
    puts red { error }
  ensure
    puts
    tmp.close(false)
  end
end

# Customised parser for command line options
def OptionParser.parse(args)
  options = OpenStruct.new
  options.file = '/bin/bash'
  options.host = 'localhost'
  options.dir = 'disk'
  options.includes = []
  options.excludes = []
  options.tests = {
    :gridftp => [ # Regular GridFTP
                  [ :gridftp, '-no-g2' ],
                  [ :gridftp, '-no-g2 -p 1' ],
                  [ :gridftp, '-no-g2 -p 10' ],
                  # Regular GridFTP but with EPSV and EPRT
                  [ :gridftp, '-no-g2 -ipv6' ],
                  [ :gridftp, '-no-g2 -ipv6 -p 1' ],
                  [ :gridftp, '-no-g2 -ipv6 -p 10' ],
                  # GridFTP with delayed passive
                  [ :gridftp, '-no-g2 -dp' ],
                  [ :gridftp, '-no-g2 -dp -p 1' ],
                  [ :gridftp, '-no-g2 -dp -p 10' ],
                  # GridFTP with delayed passive and EPSV and EPRT
                  [ :gridftp, '-no-g2 -dp -ipv6' ],
                  [ :gridftp, '-no-g2 -dp -ipv6 -p 1' ],
                  [ :gridftp, '-no-g2 -dp -ipv6 -p 10' ],
                  # GridFTP using GET/PUT
                  [ :gridftp, '-g2' ],
                  [ :gridftp, '-g2', '-p 1' ],
                  [ :gridftp, '-g2', '-p 10' ],
                  # Stress the data channel handling
                  [ :gridftp, '-no-g2', '-p -100' ],
                  [ :gridftp, '-g2', '-p -100' ] ],
    :xrootd => [ [ :xrootd ] ],
    :dcap => [ [ :dcap ] ],
    :gsidcap => [ [ :gsidcap ] ],
    :srmcp => [ [ :srmcp, '-2' ]
              ],
    :arc => [ [ :arcSrm ],
              [ :arcHttps ] ],
    :uberftp => [ [ :uberftp ] ],
    :http => [ [ :http ], [ :https ], [ :httpNoAnonymous ],
               [ :httpUserRootUpload ], [ :httpUserRootDownload ],
               [ :httpDoorRootUpload ], [ :httpDoorRootDownload ],
               [ :httpUsersRootDoorRootUpload ], [ :httpUsersRootDoorRootDownload ],
               [ :httpDoorRootUsersRootUpload ], [ :httpDoorRootUsersRootDownload ]
             ]
  }

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on("-f", "--file FILE", "Input file") do |value|
      options.file = value
    end

    opts.on("-H", "--host HOST", "Target host") do |value|
      options.host = value
    end

    opts.on("-d", "--dir PATH", "Target directory") do |value|
      options.dir = value
    end

    opts.on("-n", "No predefined tests") do |value|
      options.tests.each_key { |key| options.tests[key] = [ [ key ] ] }
    end

    opts.on("--[no-]srm", "Test SRM") do |value|
      (value ? options.includes : options.excludes ) << :srmcp
    end

    opts.on("--[no-]dcap", "Test DCAP") do |value|
      (value ? options.includes : options.excludes ) << :dcap
    end

    opts.on("--[no-]gsidcap", "Test GSIDCAP") do |value|
      (value ? options.includes : options.excludes ) << :gsidcap
    end

    opts.on("--[no-]gridftp", "Test GridFTP") do |value|
      (value ? options.includes : options.excludes ) << :gridftp
    end

    opts.on("--[no-]xrootd", "Test XROOTD") do |value|
      (value ? options.includes : options.excludes ) << :xrootd
    end

    opts.on("--[no-]arc", "Test ARC client") do |value|
      (value ? options.includes : options.excludes ) << :arc
    end

    opts.on("--[no-]http", "Test HTTP") do |value|
      (value ? options.includes : options.excludes ) << :http
    end

    opts.on("--[no-]uberftp", "Test UberFTP client") do |value|
      (value ? options.includes : options.excludes ) << :uberftp
    end

    opts.on("-h", "--help", "Show this message") do |value|
      puts parser
      exit
    end
  end

  parser.parse!(args)

  if ! options.includes.empty? then
    options.tests.delete_if { |key, value| ! options.includes.include?(key) }
  end
  options.tests.delete_if { |key, value| options.excludes.include?(key) }

  options
end

ENV["X509_CERT_DIR"] = @truststore  # tell Globus library to use
@options = OptionParser.parse(ARGV)
@options.tests.values.flatten(1).each do |method, *args|
  test(method, *(args + ARGV))
end
