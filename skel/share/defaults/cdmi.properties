#  -----------------------------------------------------------------------
#     dCache default values
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  -----------------------------------------------------------------------
#     Parameters related to CDMI startup
#  -----------------------------------------------------------------------
cdmi.cell.name=cdmi

# Whether space reservations are supported, used in the next part
(one-of?true|false|${dcache.enable.space-reservation})cdmi.enable.space-reservation=${dcache.enable.space-reservation}

# The first line (deprecated) is still used in the third line, so I cannot remove that line.
cdmi.service.poolmanager=${cdmi.service.poolmanager-space-${cdmi.enable.space-reservation}}
cdmi.service.poolmanager.timeout=300000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.service.poolmanager.timeout.unit=MILLISECONDS
(immutable)cdmi.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)cdmi.service.poolmanager-space-true=${dcache.service.spacemanager}
(one-of?true|false|${dcache.enable.spacemanager})cdmi.enable.spacemanager=${dcache.enable.spacemanager}

#  The port cdmi will listen on.
cdmi.net.port=8543
#
#  The interface cdmi will listen on.
cdmi.net.listen=${dcache.net.listen}

# ---- Host name of cdmi service
#
# For certain operations cdmi needs to know its domain name.  The
# property "cdmiHost" can be used to override the default value.  If
# this value is not set, the value is detected automatically and it is
# equivalent to the output of the unix hostname program.
#
cdmi.net.host=${host.fqdn}

# ---- Host names of cdmi services in this deployment
#
# A host part of the source url (surl) is used to determine if the
# surl references file in this storage system.  In case of the copy
# operation, cdmi needs to be able to dinstinguish between the local
# surl and the remote one.  Also cdmi needs to refuse to perform
# operations on non local cdmi urls. localcdmiHosts is a comma separated
# list of hosts that will be considered local by this cdmi service.
# This parameter might need to be defined as a list because in case of
# the multihomed or distributed server it may have more than one
# network name.  If localcdmiHosts is not specified, cdmiHost will be
# used
#
cdmi.net.local-hosts=${cdmi.net.host}

# ---- Maximum number of threads used for cdmi request processing
#
# Whenever a client submits an cdmi request a thread is allocated. This
# setting controls the maximum number of such threads.
#
# Notice that this does not control the number of cdmi transfers that
# can be active at any given time: An cdmi transfer involves several
# requests by the client (eg cdmiPrepareToGet, cdmiStatusOfGetRequest,
# cdmiReleaseFiles).
#
# There is also a choice whether to process requests synchronously or
# asynchronously. If processed synchronously, the request is not
# answered until processed. This means that a thread is bound to the
# request for the duration of the request processing. If prcessed
# asynchronous, the thread is released right away and the client
# submits new requests to poll for the completion of the previously
# submitted request. This adds latency and increases authentication
# overhead, but frees thread and TCP connections.
#
cdmi.limits.jetty.threads.max=500

# ---- Minimum number of threads used for cdmi request processing
cdmi.limits.jetty.threads.min=10

# ---- Milliseconds before an idle requst processing thread is terminated
cdmi.limits.jetty.threads.idle-time.max=30000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.limits.jetty.threads.idle-time.max.unit=MILLISECONDS

# ---- Maximum number of queued cdmi requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
cdmi.limits.jetty.threads.queued.max=500

# set graceful shutdown timeout. If set, the internal doStop() method
# will not immediately stop the server. Instead, all Connectors will
# be closed so that new connections will not be accepted and all handlers that
# implement Server.Graceful will be put into the shutdown mode so that no
# new requests will be accepted, but existing requests can complete.
# The server will then wait the configured timeout before stopping.
cdmi.limits.jetty.graceful-shutdown=2000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.limits.jetty.graceful-shutdown.unit=MILLISECONDS
