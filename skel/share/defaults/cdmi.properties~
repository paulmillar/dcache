# Mix of old and new convention, but it works. Just for understanding.
cdmi.cell.name=cdmi
cdmi.formal=false

# The first line (deprecated) is still used in the third line, so I cannot remove that line. 
(deprecated)cdmiPoolManagerTimeout=300000
cdmi.service.poolmanager=${cdmi.service.poolmanager-space-${cdmi.enable.spacemanager}}
cdmi.service.poolmanager.timeout=${cdmiPoolManagerTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.service.poolmanager.timeout.unit=MILLISECONDS
(immutable)cdmi.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)cdmi.service.poolmanager-space-true=${dcache.service.spacemanager}
(one-of?true|false|${dcache.enable.spacemanager})cdmi.enable.spacemanager=${dcache.enable.spacemanager}


#  ---- TCP Port
#
# (deprecated)srmPort=8443
(deprecated)cdmiPort=8543
cdmi.net.port=${cdmiPort}
#
#  The port cdmi will listen on for SSL-based communication.  SSL is an
#  industry standard encryption transport.
#
# (deprecated)srm.ssl.port=8445
(deprecated)cdmi.ssl.port=8545
cdmi.net.ssl-port=${cdmi.ssl.port}

#  The interface cdmi will listen on.
cdmi.net.listen=${dcache.net.listen}

# ---- Host name of cdmi service
#
# For certain operations cdmi needs to know its domain name.  The
# property "cdmiHost" can be used to override the default value.  If
# this value is not set, the value is detected automatically and it is
# equivalent to the output of the unix hostname program.
#
(deprecated)cdmiHost=${host.fqdn}
cdmi.net.host=${cdmiHost}

# ---- Host names of cdmi services in this deployment
#
# A host part of the source url (surl) is used to determine if the
# surl references file in this storage system.  In case of the copy
# operation, cdmi needs to be able to dinstinguish between the local
# surl and the remote one.  Also cdmi needs to refuse to perform
# operations on non local cdmi urls. localcdmiHosts is a comma separated
# list of hosts that will be considered local by this cdmi service.
# This parameter might need to be defined as a list because in case of
# the multihomed or distributed server it may have more than one
# network name.  If localcdmiHosts is not specified, cdmiHost will be
# used
#
(deprecated)localcdmiHosts=${cdmi.net.host}
cdmi.net.local-hosts=${localcdmiHosts}

# ---- Threads that accept TCP connections
(deprecated)cdmiJettyConnectorAcceptors=1
cdmi.limits.jetty-connector.acceptors=${cdmiJettyConnectorAcceptors}

# ---- Milliseconds before an idle TCP connection is closed
(deprecated)cdmiJettyConnectorMaxIdleTime=60000
cdmi.limits.jetty-connector.idle-time.max=${cdmiJettyConnectorMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.limits.jetty-connector.idle-time.max.unit=MILLISECONDS

# --- Handshake timeout
cdmi.limits.jetty-connector.handshake.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES)cdmi.limits.jetty-connector.handshake.timeout.unit=MILLISECONDS

# ---- Milliseconds before an idle TCP connection is closed during high load
(deprecated)cdmiJettyConnectorLowResourceMaxIdleTime=20000
cdmi.limits.jetty-connector.low-resource.max.idle-time=${cdmiJettyConnectorLowResourceMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.limits.jetty-connector.low-resource.max.idle-time.unit=MILLISECONDS

# ---- TCP backlog for cdmi connections
(deprecated)cdmiJettyConnectorBackLog=1024
cdmi.limits.jetty-connector.backlog=${cdmiJettyConnectorBackLog}

# ---- Maximum number of threads used for cdmi request processing
#
# Whenever a client submits an cdmi request a thread is allocated. This
# setting controls the maximum number of such threads.
#
# Notice that this does not control the number of cdmi transfers that
# can be active at any given time: An cdmi transfer involves several
# requests by the client (eg cdmiPrepareToGet, cdmiStatusOfGetRequest,
# cdmiReleaseFiles).
#
# There is also a choice whether to process requests synchronously or
# asynchronously. If processed synchronously, the request is not
# answered until processed. This means that a thread is bound to the
# request for the duration of the request processing. If prcessed
# asynchronous, the thread is released right away and the client
# submits new requests to poll for the completion of the previously
# submitted request. This adds latency and increases authentication
# overhead, but frees thread and TCP connections.
#
(deprecated)cdmiJettyThreadsMax=500
cdmi.limits.jetty.threads.max=${cdmiJettyThreadsMax}

# ---- Minimum number of threads used for cdmi request processing
(deprecated)cdmiJettyThreadsMin=10
cdmi.limits.jetty.threads.min=${cdmiJettyThreadsMin}

# ---- Milliseconds before an idle requst processing thread is terminated
(deprecated)cdmiJettyThreadsMaxIdleTime=30000
cdmi.limits.jetty.threads.idle-time.max=${cdmiJettyThreadsMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.limits.jetty.threads.idle-time.max.unit=MILLISECONDS

# ---- Maximum number of queued cdmi requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
(deprecated)cdmiJettyThreadsMaxQueued=500
cdmi.limits.jetty.threads.queued.max=${cdmiJettyThreadsMaxQueued}

# set graceful shutdown timeout. If set, the internal doStop() method
# will not immediately stop the server. Instead, all Connectors will
# be closed so that new connections will not be accepted and all handlers that
# implement Server.Graceful will be put into the shutdown mode so that no
# new requests will be accepted, but existing requests can complete.
# The server will then wait the configured timeout before stopping.
(deprecated)cdmiGracefulShutdown=2000
cdmi.limits.jetty.graceful-shutdown=${cdmiGracefulShutdown}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.limits.jetty.graceful-shutdown.unit=MILLISECONDS

# path to host certificate
cdmi.authn.hostcert.cert=${grid.hostcert.cert}

# Host key
cdmi.authn.hostcert.key=${grid.hostcert.key}

# Host key refresh interval
cdmi.authn.hostcert.refresh=${grid.hostcert.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${grid.hostcert.refresh.unit})cdmi.authn.hostcert.refresh.unit=${grid.hostcert.refresh.unit}

# Path to CA directory
cdmi.authn.capath=${grid.ca.path}

# How often to check the CA certificates for updates
cdmi.authn.capath.refresh=${grid.ca.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${grid.ca.refresh.unit})cdmi.authn.capath.refresh.unit=${grid.ca.refresh.unit}

# ---- Directory for delegated proxy certificates //not used till now
#
# This is the directory in which the delegated user credentials will
# be stored as files. We recommend set permissions to 700 on this
# directory.
#
(deprecated)cdmiUserCredentialsDirectory=@cdmiUserCredentialsDirectory@
cdmi.user.credentials.directory=${cdmiUserCredentialsDirectory}

# ---- Login broker and CDMI
# Login broker will be needed later, I'm sure.

#  Security related properties (???)
cdmi.security.ciphers=${dcache.security.ciphers}

#
#   Document which TCP ports are opened
#
(immutable)cdmi.net.ports.tcp=${cdmi.net.port}

