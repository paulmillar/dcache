#  -----------------------------------------------------------------------
#     Default values for FTP doors
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  Cell names for FTP doors
#
ftp.cell.name.plain=FTP-${host.name}
ftp.cell.name.gsi=GFTP-${host.name}
ftp.cell.name.kerberos=KFTP-${host.name}
ftp.cell.name=${ftp.cell.name.${ftp.authn.protocol}}

#  ---- Whether to export the ftp cell as a well known cell
#
#  This property controls whether the ftp cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)ftp.cell.export=true

#  Authentication scheme.
(one-of?plain|gsi|kerberos)ftp.authn.protocol=plain

#  Service Principle Names for Kerberos authentication
#
#  You should not need to alter these.
#
ftp.authn.kerberos.service-principle-name=ftp/${host.fqdn}@${dcache.authn.kerberos.realm}
ftp.authn.kerberos.key-distribution-center-list=${dcache.authn.kerberos.key-distribution-center-list}

#  Path to host private key
ftp.authn.hostcert.key=${dcache.authn.hostcert.key}

#  Path to host certificate
ftp.authn.hostcert.cert=${dcache.authn.hostcert.cert}

#  Path to directory containing trusted CA certificates
ftp.authn.capath=${dcache.authn.capath}

#  Authorization file for tape protection (only used if ftp.authz.staging.pep is 'doors')
ftp.authz.staging=${dcache.authz.staging}

#  Where to put the policy enforcement point (PEP) for stage authorization
(one-of?doors|PoolManager)ftp.authz.staging.pep=${dcache.authz.staging.pep}

#  Whether FTP door allows users to modify content
#
#  The ftp.authz.readonly property controls whether an FTP door will allow
#  users to upload files, delete files or otherwise modify dCache's
#  contents.
(one-of?true|false)ftp.authz.readonly=${ftp.authz.readonly.${ftp.authn.protocol}}
(one-of?true|false)ftp.authz.readonly.plain=true
(one-of?true|false)ftp.authz.readonly.gsi=false
(one-of?true|false)ftp.authz.readonly.kerberos=false

#  ---- Upload directory
#
#   The FTP door restricts access to the user's root directory (as defined
#   by gPlazma). The upload directory is an exception to this rule. The directory
#   is typically used by SRM for uploading files.
#
#   If the property is defined to a relative path, it is interpreted relative to
#   the account's root directory.
#
ftp.authz.upload-directory=${dcache.upload-directory}

#  ---- Root path of FTP door
#
#   Specifies the root directory exposed through the FTP door.
#   If ftp.root has an empty value, then the user's root path is
#   used.  If ftp.root has a non-empty value then only the
#   specified sub-tree is visible and any user unable to
#   access that sub-tree will be denied.
#
ftp.root=

# TCP port number dCache will listen for incoming connections
(forbidden)ftpPort = Use ftp.net.port
(forbidden)kerberosFtpPort = Use ftp.net.port
(forbidden)gsiFtpPortNumber = Use ftp.net.port
ftp.net.port=${ftp.net.port.${ftp.authn.protocol}}
ftp.net.port.plain = 22126
ftp.net.port.kerberos = 22127
ftp.net.port.gsi = 2811

#  Network interface to bind to
#
#  The network interface is identified by its IP address. Specify the wildcard
#  address, 0.0.0.0, to bind to all interfaces.
ftp.net.listen=${dcache.net.listen}

#  FTP passive mode port range
#
#  Used when the door accepts data channel connections from clients. Such
#  data channels are used for directory listing and when the door acts as
#  a proxy for the file transfer.
(forbidden)clientDataPortRange = Use ftp.net.port-range
ftp.net.port-range=${dcache.net.wan.port.min}:${dcache.net.wan.port.max}

#  IP address for connections from pools to the FTP door
#
#  FTP doors in some cases act as proxies for the transfer. This
#  property specifies the IP of the interface on the door that the
#  pool will connect to. If empty, the door will choose a local
#  address. This address must not be a wildcard address.
(forbidden)gsiftpAdapterInternalInterface = Use ftp.net.internal
ftp.net.internal =

#  Whether passive FTP transfers are relayed by the door
#
#  Passive FTP transfers are those where the client creates the data
#  channel connection to the server.
#
#  If this option is set to true, then all passive transfers are
#  relayed by the FTP door. If this option is set to false, then the
#  client is instructed to connect directly to the pool. This
#  requires that the pool allows inbound connections. Even when set
#  to false, there are several circumstances in which the connection
#  cannot be established directly to the pool due to limitations in
#  the FTP protocol. In such cases the connection will be relayed by
#  the door.
#
#  This setting is interpreted by both FTP doors and pools. For a
#  given combination of door and pool, a direct connection to the
#  pool can only be established if this setting is false at both the
#  door and the pool.
(one-of?true|false)ftp.proxy.on-passive=false

#  Whether active FTP transfers are relayed by the door
#
#  Active FTP transfers are those where the server creates the data
#  channel connection to the client.
#
#  If this option is set to true, then all active transfers are
#  relayed by the FTP door. If this option is set to false, then the
#  pool connects directly to the client. This requires that the pool
#  allows outbound connections. If the pool cannot establish the
#  connection to the client, then the transfer will fail.
(one-of?true|false)ftp.proxy.on-active=false

#  Period between successive GridFTP performance markers
#
#  This variable controls how often performance markers are written.
#  A value of '0' will disable performance markers.
(forbidden)performanceMarkerPeriod = Use ftp.performance-marker-period
ftp.performance-marker-period = 70
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.performance-marker-period.unit = SECONDS

#  How many times to retry pool selection
#
#  If pool selection fails for some reason, the door may retry the
#  operation. This setting specifies how many times to retry before
#  the transfer fails.
(forbidden)gsiftpMaxRetries = Use ftp.limits.retries
ftp.limits.retries = 80

#  Maximum number of concurrent streams to allow
#
#  For GridFTP mode E transfers multiple TCP streams are used for the
#  data channel. In active FTP (server creates data channel), the
#  maximum number of channels allowed is controlled by this
#  property. For passive FTP (client creates data channel) the
#  maximum number cannot be controlled by the server.
(forbidden)gsiftpMaxStreamsPerClient = Use ftp.limits.streams-per-client
ftp.limits.streams-per-client = 10

#  Limit on number of concurrent logins
#
#  Specifies the largest number of simultaneous logins to allow to an
#  FTP door.
(forbidden)gsiftpMaxLogin = Use ftp.limits.clients
ftp.limits.clients = 100

#  Whether to delete files after upload failures
#
#  When set to true, FTP doors delete files after upload failures.
(forbidden)gsiftpDeleteOnConnectionClosed = Use ftp.enable.delete-on-failure
(one-of?true|false)ftp.enable.delete-on-failure = true

#  Mover queue
#
#  The mover queue on the pool to which FTP transfers will be
#  scheduled. If blank, the default queue will be used.
(forbidden)gsiftpIoQueue = Use ftp.mover.queue
ftp.mover.queue =

#  FTP transaction log directory
#
#  When set, a log file per FTP session is created in this directory.
(forbidden)FtpTLogDir = Use ftp.transaction-log
ftp.transaction-log=

#  Whether existing files may be overwritten
#
#  Controls how to respond when a client attempts to upload data to a
#  file that already exists.  If set to 'false' then such attempts will
#  always fail.  If set to 'true' then the upload will succeed if the
#  user has sufficient permissions to delete the existing data.
#
#  Note that RFC 959 states:
#
#       STORE (STOR)
#
#       [...] If the file specified in the pathname exists at the
#       server site, then its contents shall be replaced by the data
#       being transferred.
#
#  By setting ftp.enable.overwrite to 'false', FTP doors will not be
#  standards-compliant and some clients may fail to operate
#  correctly.
(one-of?true|false)ftp.enable.overwrite=${dcache.enable.overwrite}

#  Flags to disable problematic crypto ciphers.
#
#  See dcache.authn.ciphers for details.
(forbidden)gridftp.security.ciphers = Use ftp.authn.ciphers
ftp.authn.ciphers=${dcache.authn.ciphers}

#  Whether to support space reservations
(one-of?true|false)ftp.enable.space-reservation=${dcache.enable.space-reservation}

#  Cell address of poolmanager service
(forbidden)gsiftpPoolManager = Use ftp.service.poolmanager
ftp.service.poolmanager = ${ftp.service.poolmanager-space-${ftp.enable.space-reservation}}
(immutable)ftp.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)ftp.service.poolmanager-space-true=${dcache.service.spacemanager}

#  Timeout for poolmanager requests
(forbidden)gsiftpPoolManagerTimeout = Use ftp.service.poolmanager.timeout
ftp.service.poolmanager.timeout = 5400
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.poolmanager.timeout.unit = SECONDS


#  Timeout for pool requests
(forbidden)gsiftpPoolTimeout = Use ftp.service.pool.timeout
ftp.service.pool.timeout = 600
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.pool.timeout.unit = SECONDS

#  Cell address of pnfsmanager service
ftp.service.pnfsmanager=${dcache.service.pnfsmanager}

#  Timeout for pnfsmanager requests
(forbidden)gsiftpPnfsTimeout = Use ftp.service.pnfsmanager.timeout
ftp.service.pnfsmanager.timeout=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.pnfsmanager.timeout.unit = SECONDS

#  Cell address of loginbroker to register with
ftp.service.loginbroker=${dcache.service.loginbroker}

#  Information for loginbroker registration
ftp.service.loginbroker.update-period=${dcache.service.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
ftp.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}
ftp.service.loginbroker.update-threshold=${dcache.service.loginbroker.update-threshold}
ftp.service.loginbroker.family=${ftp.service.loginbroker.family.${ftp.authn.protocol}}
ftp.service.loginbroker.version=${ftp.service.loginbroker.version.${ftp.authn.protocol}}
ftp.service.loginbroker.family.plain=ftp
ftp.service.loginbroker.version.plain=1.0.0
ftp.service.loginbroker.family.gsi=gsiftp
ftp.service.loginbroker.version.gsi=1.0.0
ftp.service.loginbroker.family.kerberos=gkftp
ftp.service.loginbroker.version.kerberos=1.0.0

#  Cell address of gplazma service
ftp.service.gplazma=${dcache.service.gplazma}

#  Cell address of billing service
ftp.service.billing=${dcache.service.billing}

#  Implementation class
(immutable)ftp.implementation=${ftp.implementation.${ftp.authn.protocol}}
(immutable)ftp.implementation.plain=org.dcache.ftp.door.WeakFtpDoorV1
(immutable)ftp.implementation.gsi=org.dcache.ftp.door.GsiFtpDoorV1
(immutable)ftp.implementation.kerberos=org.dcache.ftp.door.KerberosFtpDoorV1

#  Document which TCP ports are opened
(immutable)ftp.net.ports.tcp=${ftp.net.port} ${ftp.net.port-range}

