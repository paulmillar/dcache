#  -----------------------------------------------------------------------
#     dCache default values
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@
#
#   Properties prefixed by 'dcache' are either not specific to any
#   particular service, or used by several services. In the former case,
#   the property is annotated with (not-for-services). In the latter case,
#   a similarly named property prefixed by the service type is defined
#   for each service using the property.
#

#  -----------------------------------------------------------------------
#     Parameters related to dCache startup
#  -----------------------------------------------------------------------

# If defined, the UID of the java process will be set.  Notice that
# log files will continue to be generated with the user id that
# invoked the init script. When undefined or left blank, the UID will
# not be changed.
(not-for-services)dcache.user=@dcache.user@

# Type of namespace backend. Legal value is chimera.
(one-of?chimera)dcache.namespace=chimera

# The layout determines which domains to start.
(not-for-services)dcache.layout=${host.name}

# Base directory for layout files
(not-for-services)dcache.layout.dir=${dcache.paths.etc}/layouts

# The layout file describes the domains of a layout
(not-for-services)dcache.layout.uri=file:${dcache.layout.dir}/${dcache.layout}.conf

# Directory for PID files
(not-for-services)dcache.pid.dir=@dcache.pid.dir@

# PID file for daemon wrapper script
(not-for-services)dcache.pid.java=${dcache.pid.dir}/dcache.${dcache.domain.name}-java.pid

# PID file for Java process
(not-for-services)dcache.pid.daemon=${dcache.pid.dir}/dcache.${dcache.domain.name}-daemon.pid

# Directory for log files
(not-for-services)dcache.log.dir=@dcache.log.dir@

# Path to log file
(not-for-services)dcache.log.file=${dcache.log.dir}/${dcache.domain.name}.log

# This variable describes what should be done with an existing log
# file when a domain is started.  The options are either to rename
# LOGFILE to LOGFILE.old so allowing a new log file to be created, or
# to retain the log file and subsequent logging information will be
# appended.
#
(not-for-services,one-of?new|keep)dcache.log.mode=keep

# Logback configuration file
(not-for-services)dcache.log.configuration=file:${dcache.paths.etc}/logback.xml

# Log levels
#
# Log levels for various log output targets. Possible log levels are off, error, warn, info,
# debug and trace. Log levels can also be adjusted at runtime using the log commands in
# the dCache admin shell.
#
# Detailed log configuration can be done in the logback configuration file, logback.xml.
#
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.file=warn
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.pinboard=info
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.remote=off
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.events=off
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.access=info

# How many days to keep access logs
dcache.log.access.max-history=30

# Host on which the remote log server will run
# relative to this dCache installation
#
(not-for-services)dcache.log.server.host=localhost

# Port on which the remote log server will listen
#
(not-for-services)dcache.log.server.port=9867

# Log formats
#
# These define the log format of various log output targets. For details on the format visit
# http://logback.qos.ch/manual/layouts.html#conversionWord
#
# Detailed log configuration can be done in the logback configuration file, logback.xml.
#
(not-for-services)dcache.log.format.file=%d{dd MMM yyyy HH:mm:ss} \\(%X{cells.cell}\\) [%X{org.dcache.ndc}] %m%n
(not-for-services)dcache.log.format.pinboard=[%t] [%X{org.dcache.ndc}] %m

# Delay, in seconds, between automatic restarts of a crashed domain
(not-for-services)dcache.restart.delay=10

# Directory used for creating the files to surpress automatic restart
(not-for-services)dcache.restart.dir=/tmp

# File used to suppress automatic restart
(not-for-services)dcache.restart.file=${dcache.restart.dir}/.dcache-stop.${dcache.domain.name}

# Java maximum heap size
(not-for-services)dcache.java.memory.heap=512m

# Java maximum direct buffer size
(not-for-services)dcache.java.memory.direct=512m

# Directory where to store heapdumps
(not-for-services)dcache.java.oom.location=${dcache.log.dir}

# Path to heap dump file
(not-for-services)dcache.java.oom.file=${dcache.java.oom.location}/${dcache.domain.name}-oom.hprof

# Extra jar files to add to the class path
(not-for-services)dcache.java.classpath=

#  ---- The Library path
#
#   Can contain .so libraries for JNI.
#
(not-for-services)dcache.java.library.path=${dcache.paths.lib}


#  ---- Java VM options
#
#  Properties that control the options to the Java VM instances.
#
#  There are two kinds of Java virtual machine instances: short-lived
#  and long-lived.
#
#  The short-lived invocations are expected to run as quickly as
#  possible and generally complete within a few seconds.
#
#  The long-lived invocations are the dCache domains.  These will have
#  the same duration as a dCache domain; i.e., many months or years.
#
#  dCache uses different Java options to hint to the JVM that the
#  different invocations have different expected lifetimes; for
#  example, short-lived invocations should favour startup speed over
#  long-term optimisation.
#
#  The JVM options used are dcache.java.options and
#  dcache.java.options.short-lived, both of which include
#  dcache.java.options.common.  In general, these three properties
#  should not be directly reconfigured, but site customisation should
#  be achieved through other properties.  In particular, additional
#  java command-line arguments may be added by configuring either the
#  dcache.java.options.extra or dcache.java.options.short-lived.extra
#  property (or both).

#  This property allows site-specific extra options that are used only
#  for long-lived JVM instances.
#
(not-for-services)dcache.java.options.extra=

#  This property allows site-specific extra options that are used only
#  for short-lived JVM instances.
#
(not-for-services)dcache.java.options.short-lived.extra=

#  This property provides Java command-line arguments for long-lived
#  JVM instances.  Sites should not modify this property, but use the
#  dcache.java.options.extra property to add any site-specific
#  arguments.
#
(not-for-services)dcache.java.options=\
    -server \
    -Xmx${dcache.java.memory.heap} \
    -XX:MaxDirectMemorySize=${dcache.java.memory.direct} \
    -Dsun.net.inetaddr.ttl=${dcache.net.inetaddr.lifetime} \
    -Dorg.globus.tcp.port.range=${dcache.net.wan.port.min},${dcache.net.wan.port.max} \
    -Dorg.dcache.dcap.port=${pool.mover.dcap.port} \
    -Dorg.dcache.net.tcp.portrange=${dcache.net.lan.port.min}:${dcache.net.lan.port.max} \
    -Dorg.globus.jglobus.delegation.cache.lifetime=${dcache.authn.gsi.delegation.cache.lifetime} \
    -Dorg.globus.jglobus.crl.cache.lifetime=${dcache.authn.gsi.crl.cache.lifetime} \
    -Djava.security.krb5.realm=${dcache.authn.kerberos.realm} \
    -Djava.security.krb5.kdc=${dcache.authn.kerberos.key-distribution-center-list} \
    -Djavax.security.auth.useSubjectCredsOnly=false \
    -Djava.security.auth.login.config=${dcache.authn.jaas.config} \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath=${dcache.java.oom.file} \
    -javaagent:${dcache.paths.classes}/aspectjweaver-1.8.4.jar \
    ${dcache.java.options.common} \
    ${dcache.java.options.extra}


#  This property provides Java command-line arguments for short-lived
#  JVM instances.  Sites should not modify this property, but
#  configure the dcache.java.options.short-lived.extra property to add
#  any site-specific arguments.
#
(not-for-services)dcache.java.options.short-lived=\
    -client \
    -XX:+TieredCompilation \
    -XX:TieredStopAtLevel=1 \
    ${dcache.java.options.common} \
    ${dcache.java.options.short-lived.extra}


#  This property provides Java command-line arguments for both
#  short-lived and long-lived JVM instances.  In general, sites should
#  not modify this property, but modify either the
#  dcache.java.options.extra property, the
#  dcache.java.options.short-lived.extra property or both properties
#  to add any site-specific arguments.
#
#  Notes:
#     - wantLog4jSetup is used by eu.emi:trustmanager
#
(not-for-services)dcache.java.options.common=\
    -Djava.awt.headless=true \
    -DwantLog4jSetup=n



# Whether to cache the compiled configuration files. If disabled most dCache
# scripts will invoke the dCache boot loader to compile the configuration files.
# When enabled the compiled configuration files are cached and only recompiled
# if any of the input files have changed.
(not-for-services)dcache.config.cache=true

# The following property describes whether dCache should run under Terracotta.
# It is only supported by the srm service at this time,so do not enable it in
# dcache.conf; instead, enable it, in the layout file, for the domain the srm
# service runs within.
#
#  For example:
#
#    [srmDomain]
#     dcache.terracotta.enabled=true
#     dcache.terracotta.install.dir=/opt/terracotta
#
#    [srmDomain/srm]
#    [srmDomain/spacemanager]
#
(not-for-services,one-of?true|false)dcache.terracotta.enabled=false

# The following parameter specifies the location of Terracotta
# If dcache.terracotta.enabled is true then this must be specified as well
(not-for-services)dcache.terracotta.install.dir=

# Location of the Terracotta configuration file
(not-for-services)dcache.terracotta.config.path=${dcache.paths.etc}/tc-config.xml

#  -----------------------------------------------------------------------
#     Parameters related to what runs inside a domain
#  -----------------------------------------------------------------------

# A batch file to execute in every domain before services are loaded.
(forbidden)domain.preload = Use dcache.domain.preload
(not-for-services)dcache.domain.preload = file:${dcache.paths.share}/cells/preload.fragment

# Directory containing service batch files (the batch files that start
# dCache cells)
(forbidden)domain.service.dir = Use dcache.domain.service.dir
dcache.domain.service.dir = ${dcache.paths.share}/services

# Base URI of service batch files (the batch files that start dCache
# cells). The trailing slash is significant due to how URIs are
# resolved relative to each other.
(forbidden)domain.service.uri.base = Use dcache.domain.service.uri.base
dcache.domain.service.uri.base = file:${dcache.domain.service.dir}/

# URI to service batch file. A relative URI is resolved by
# searching the plugin directories. If not found, it is resolved
# relative to domain.service.uri.base.
(forbidden)domain.service.uri = Use dcache.domain.service.uri
dcache.domain.service.uri = ${dcache.domain.service}.batch

#  -----------------------------------------------------------------------
#     Common network related parameters
#  -----------------------------------------------------------------------

# Port range used for transfers using typical WAN protocols
(forbidden)net.wan.port.min = Use dcache.net.wan.port.min
(forbidden)net.wan.port.max = Use dcache.net.wan.port.max
(not-for-services)dcache.net.wan.port.min = 20000
(not-for-services)dcache.net.wan.port.max = 25000

# Port range used for transfers using typical LAN protocols
(forbidden)net.lan.port.min = Use dcache.net.lan.port.min
(forbidden)net.lan.port.max = Use dcache.net.lan.port.max
(not-for-services)dcache.net.lan.port.min = 33115
(not-for-services)dcache.net.lan.port.max = 33145

# Java DNS cache (seconds)
(forbidden)net.inetaddr.lifetime = Use dcache.net.inetaddr.lifetime
(not-for-services)dcache.net.inetaddr.lifetime = 1800

#
#   Various components can bind to a particular network interface.  The value of
#   the dcache.net.listen property describes which interface a door should use.
#   The value is the IP address of the interface the component should use; for
#   example, the loop-back interface (commonly 'lo') is '127.0.0.1' for IPv4,
#   '::1' for IPv6.
#
#   The address '0.0.0.0' listens on all interfaces for IPv4
#   connections and '::' listens on all interfaces for IPv6
#   connections (depending on the platform, an IPv4 address may be
#   converted to the equivalent IPv6 address and match '::').  The
#   keyword 'any' will listen on all interfaces.
#
#   If a hostname is specified, the name is resolved to an address and the service
#   binds to that interface. When publishing this interface to SRM or the info
#   service, this name is used as is. Therefore it is advised to use an FQDN. If
#   an address is specified, reverse lookup to obtain the FQDN is performed.
#
(forbidden)listen = Use dcache.net.listen
dcache.net.listen = any

#  -----------------------------------------------------------------------
#          Cell Communication
#  -----------------------------------------------------------------------

#  ---- Which message broker implementation to use
#
#   Selects between various message brokers. The message broker
#   determines how dCache domains communicate with each other. Valid
#   values are:
#
#   'cells' is the classic cells based system. It relies on a central
#   location service that all domains connect to. The host, port and
#   domain of this service is defined by dcache.broker.host,
#   dcache.broker.port and dcache.broker.domain.
#
#   'amq' connects to an ActiveMQ broker.
#
#   'amq-embedded' starts an embedded ActiveMQ broker in the
#   ${dcache.broker.domain} domain. For other domains this is
#   equivalent to specifying 'amq'.
#
#   'cells+amq-embedded' is a hybrid broker. An embedded ActiveMQ
#   broker is started in the ${dcache.broker.domain} domain. At the
#   same time a classic cells location service is instantiated in the
#   same domain. Thus both 'cells' and 'amq' can be used by other
#   domains to connect to the broker.
#
#   'openmq' connects to an OpenMQ broker.
#
#   'cells+openmq' is a hybrid solution. A connection to an OpenMQ
#   broker is established. At the same time a classic cells location
#   service is instantiated in the ${dcache.broker.domain}
#   domain. Thus both 'cells' and 'openmq' can be used by other
#   domains to connect to the broker.
#
#   'none' no broker connection is establish. This is used for single
#   domain deployments.
#
(forbidden)broker.scheme = Use dcache.broker.scheme
(not-for-services,one-of?cells|none\
                        |amq|amq-embedded|cells+amq-embedded\
                        |openmq|cells+openmq)\
dcache.broker.scheme = cells


#  ---- Broker for interdomain communication
#
#   By default both the cells and the hybrid broker styles use a star
#   topology with all messages going through a central domain. This
#   domain is usually dCacheDomain, but any domain can be used.
#
#   As all other domains need to connect to the broker, broker.host
#   has to be configured throughout the dCache instance unless the
#   broker runs on the local host or if there is no broker.
#
#   Domains open a UDP port to listen for topology information.  The
#   information is sent from the ${dcache.broker.domain} domain.  The
#   port number that a domain listens for topology information is
#   configured by the dcache.broker.client.port property.  This is
#   either the port number or '0' (indicating a randomly chosen port
#   number).
#
#   NOTE: ${dcache.broker.client.port} must be EITHER a unique port
#   number OR '0'.  This means that it is almost certainly wrong to
#   configure this property anywhere other than in a domain's context
#   (i.e., immediately after declaring a domain).
#
#   Inter-domain messages are sent via TCP on port
#   ${dcache.broker.messaging.port}.  Since topology discovery uses
#   UDP, dcache.broker.port and dcache.broker.messaging.port may have
#   the same port number.
#
(forbidden)broker.domain = Use dcache.broker.domain
(not-for-services)dcache.broker.domain = dCacheDomain
(forbidden)broker.host = Use dcache.broker.host
(not-for-services)dcache.broker.host = localhost
(forbidden)broker.port = Use dcache.broker.port
(not-for-services)dcache.broker.port = 11111
(forbidden)broker.messaging.port = Use dcache.broker.messaging.port
(not-for-services)dcache.broker.messaging.port = ${dcache.broker.port}
(forbidden)broker.client.port = Use dcache.broker.client.port
(not-for-services)dcache.broker.client.port = 0

#  ---- Location of location manager configuration file
#
#   Only used when dcache.broker.scheme is cells and only by the
#   ${dcache.broker.domain} domain.  If the file doesn't exist then a
#   default 'star' topology is used, where the ${dcache.broker.domain}
#   domain accepts connections from all other domains and routes
#   messages accordingly.
#
#   If the ${dcache.broker.cells.config} file exists then it is read
#   by the lmd cell running in ${dcache.broker.domain} on startup.
#   This allows site-specific adjustments to the messaging topology.
#
#   Please note that adjusting the messaging topology is an advance
#   feature that few (if any) dCache deployments need to adjust.
#   Using a different messaging technology may be a preferable
#   solution; see dcache.broker.scheme property for the alternatives.
#
#   The user ${dcache.user} must be able to write into the directory
#   in which the file is located for the 'setup write' command of
#   location manager cell (lmd) to work.
#
(forbidden)broker.cells.config = Use dcache.broker.cells.config
(not-for-services)dcache.broker.cells.config = ${dcache.paths.etc}/lm.config

#  ---- Port and host used for ActiveMQ broker
#
#   Determines the host and port used for the ActiveMQ broker.  Only
#   used if ${dcache.broker.scheme} is either 'jms' or 'hybrid'.
#
(forbidden)broker.amq.host = Use dcache.broker.amq.host
(not-for-services)dcache.broker.amq.host = ${dcache.broker.host}
(forbidden)broker.amq.port = Use dcache.broker.amq.port
(not-for-services)dcache.broker.amq.port = 11112
(forbidden)broker.amq.ssl.port = Use dcache.broker.amq.ssl.port
(not-for-services)dcache.broker.amq.ssl.port = 11113

#  ---- Connection URL for ActiveMQ
#
#   By default, the ActiveMQ connection URL is formed from
#   ${dcache.broker.amq.host} and ${dcache.broker.amq.port}. The
#   dcache.broker.amq.url property may be used to configure more
#   advanced broker topologies. Consult the ActiveMQ documentation for
#   possible values.
#
(forbidden)broker.amq.url = Use dcache.broker.amq.url
(not-for-services)dcache.broker.amq.url = failover:tcp://${dcache.broker.amq.host}:${dcache.broker.amq.port}

#  ----- OpenMQ broker host
(forbidden)broker.openmq.host = Use dcache.broker.openmq.host
(not-for-services)dcache.broker.openmq.host = ${dcache.broker.host}

#  ----- OpenMQ broker port
(forbidden)broker.openmq.port = Use dcache.broker.openmq.port
(not-for-services)dcache.broker.openmq.port = 11112

#  ----- OpenMQ interval in milliseconds between connection attempts
(forbidden)broker.openmq.reconnect.interval = Use dcache.broker.openmq.reconnect-interval
(not-for-services)dcache.broker.openmq.reconnect-interval = 30000
(not-for-services,one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.broker.openmq.reconnect-interval.unit=MILLISECONDS

#  -----------------------------------------------------------------------
#          Cell addresses of dCache components
#  -----------------------------------------------------------------------

(forbidden)pnfsmanager = Use dcache.service.pnfsmanager
(forbidden)poolmanager = Use dcache.service.poolmanager
(forbidden)billing = Use dcache.service.billing
(forbidden)gplazma = Use dcache.service.gplazma
(forbidden)spacemanager = Use dcache.service.spacemanager

dcache.service.alarms=${alarms.cell.name}
dcache.service.broadcast = ${broadcast.cell.name}
dcache.service.pnfsmanager = ${pnfsmanager.cell.name}
dcache.service.poolmanager = ${poolmanager.cell.name}
dcache.service.billing = ${billing.cell.name}
dcache.service.gplazma = ${gplazma.cell.name}
dcache.service.spacemanager = ${spacemanager.cell.name}
dcache.service.pinmanager = ${pinmanager.cell.name}
dcache.service.replica = ${replica.cell.name}
dcache.service.transfermanager = ${transfermanagers.cell.name}
dcache.service.copymanager = CopyManager


#  -----------------------------------------------------------------------
#          Common authentication properties
#  -----------------------------------------------------------------------

# GSI caching parameters (ms)
(forbidden)gsi.delegation.cache.lifetime = Use dcache.authn.gsi.delegation.cache.lifetime
(not-for-services)dcache.authn.gsi.delegation.cache.lifetime = 30000
(forbidden)gsi.crl.cache.lifetime = Use dcache.authn.gsi.crl.cache.lifetime
(not-for-services)dcache.authn.gsi.crl.cache.lifetime =60000


#  ---- Kerberos realm
#
#  Your kerberos 5 realm, used by Kerberos dcap and FTP doors.
#  Leaving this value not set will force dCache to use /etc/krb5.conf.
#
(forbidden)kerberos.realm = Use dcache.authn.kerberos.realm
(not-for-services)dcache.authn.kerberos.realm =

#  ---- Kerberos key distribution center
#
#  A comma-separated list of KDC hostnames.  localhost may be used if
#  a KDC multiplexer is running on the same machine as the Kerberos FTP doors.
#  Leaving this value not set will force dCache to use /etc/krb5.conf.
#
(forbidden)kerberos.key-distribution-center-list = Use dcache.authn.kerberos.key-distribution-center-list
dcache.authn.kerberos.key-distribution-center-list =

#  ----- JAAS configuration file
#
#  Template JAAS configuration files are available in the
#  share/examples/kerberos directory as jgss.conf and jgss_host.conf.
#  Please copy these files into ${dcache.paths.etc} and modify their
#  content as appropriate.  The minimum configuration is to change
#  the principle value, replacing "door.example.org" with the FQDN of
#  the door and replacing "EXAMPLE.ORG" with the Kerberos Realm.
#
#  The file jgss.conf is suitable for a domain running a Kerberos FTP
#  door and jgss_host.conf is suitable for a domain running a Kerberos
#  dcap door.  Only one file may be specified per domain.
#
(forbidden)kerberos.jaas.config = Use dcache.authn.jaas.config
dcache.authn.jaas.config = ${dcache.paths.etc}/jgss.conf
#dcache.authn.jaas.config=${dcache.paths.etc}/jgss.conf
#dcache.authn.jaas.config=${dcache.paths.etc}/jgss_host.conf


#  ---- SSL Server certificate
#
#   This parameter specifies the path to the file containing the
#   PKCS12 encoded server certificate used for SSL. The host certificate
#   in /etc/grid-security/ needs to be converted to PKCS12 format before
#   it can be used with SSL. Use the 'bin/dcache import
#   hostcert' command to perform this task. This is used in Webadmin and WebDAV
#
#   Notice that for GSI the host cetificate in /etc/grid-security/ is used
#   directly.
#
(forbidden)keyStore = Use dcache.authn.keystore
dcache.authn.keystore = ${dcache.paths.etc}/hostcert.p12

#  ---- Password for SSL server certificate
#
#   This parameter specifies the password with which the PKCS12 encoded
#   server certificate is encrypted.
#
(forbidden)keyStorePassword = Use dcache.authn.keystore.password
dcache.authn.keystore.password = dcache

#  ---- Trusted SSL CA certificates
#
#   This parameter specifies the path to a Java Keystore containing
#   the the trusted CA certicates used for SSL. The CA certificates
#   in /etc/grid-security/certificates/ need to be converted into a
#   Java Keystore file before they can be used with SSL. Use the
#   'bin/dcache import cacerts' command to perform this task.
#   This is used in httpd and WebDAV.
#
#   Notice that for GSI the CA cetificates in
#   /etc/grid-security/certificates/ are used directly.
#
(forbidden)trustStore = Use dcache.authn.truststore
dcache.authn.truststore = ${dcache.paths.etc}/certificates.jks

#  ---- Password for trusted SSL CA certificates
#
#   This parameter specifies the password with which the Java Keystore
#   containing the trusted CA certificates is encrypted.
#
(forbidden)trustStorePassword = Use dcache.authn.truststore.password
dcache.authn.truststore.password =dcache

# ---- Host private key in PEM format
(forbidden)grid.hostcert.key = Use dcache.authn.hostcert.key
dcache.authn.hostcert.key = ${dcache.paths.grid-security}/hostkey.pem

# ---- Host certificate in PEM format
(forbidden)grid.hostcert.cert = Use dcache.authn.hostcert.cert
dcache.authn.hostcert.cert = ${dcache.paths.grid-security}/hostcert.pem

# ---- Host certificate refresh period
#
# This option influences in which intervals the host certificate will be
# reloaded on a running door.
#
(forbidden)grid.hostcert.refresh = Use dcache.authn.hostcert.refresh
dcache.authn.hostcert.refresh = 43200
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.authn.hostcert.refresh.unit = SECONDS

#  ---- Verification of the issuer chain of the host certificate
#
#  This can have advantages and disadvantages. If the used host certificates
#  are in a Grid environment, where they are supposed to be signed by trusted
#  CA certificates, setting this to true establishes a fail-fast behaviour.
#
#  If the certificates are self-signed or signed by a custom-CA, this value
#  should be set to false.
#
(forbidden)grid.hostcert.verify = Use dcache.authn.hostcert.verify
(one-of?true|false)dcache.authn.hostcert.verify=true

#  ---- Directory containing trusted CA certificates
(forbidden)grid.ca.path = Use dcache.authn.capath
dcache.authn.capath = ${dcache.paths.grid-security}/certificates

# ---- CA certificates refresh period
#
# Grid-based authentication usually requires to load a set of
# certificates that are accepted as certificate authorities. This
# option influences in which interval these trust anchors are
# reloaded.
#
(forbidden)grid.ca.refresh = Use dcache.authn.capath.refresh
dcache.authn.capath.refresh = 43200
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.authn.capath.refresh.unit = SECONDS

# ---- Path to vomsdir directory
#
# Contains attribute validation information for authorized VOMS servers
dcache.authn.vomsdir=${dcache.paths.grid-security}/vomsdir


# ---- Flags to disable ciphers
#
#   Comma separated list of flags related to ciphers.
#
#   DISABLE_BROKEN_DH
#
#   Diffie-Hellman is broken in Java 1.7u6 and forward. If  DISABLE_BROKEN_DH is
#   included, dCache will disable all cipher families involving Diffie-Hellman on
#   those versions of Java. Depending on the client, this may result in less
#   secure SSL/TLS/GSI connections.
#
#   The symptoms of running with broken Diffie-Hellman enabled is that approximately
#   0.4% of all connections will fail during handshake.
#
#   DISABLE_EC
#
#   Elliptic Curve ciphers are broken in Java 1.7 on Linux. The problem is that the
#   JRE successfully negotiates the use of cipher variants not supported by libnss3.
#   If this option is specified, dCache will disable all cipher families involving
#   Elliptic Curve ciphers.
#
(forbidden)dcache.security.ciphers =
(any-of?DISABLE_EC|DISABLE_BROKEN_DH)dcache.authn.ciphers = DISABLE_EC,DISABLE_BROKEN_DH

#  ---- Whether to overwrite existing files on upload
#
#   The following property affects FTP doors, WebDAV doors and the SRM.
#   For dcap see the dcap.authz.truncate property.  For xrootd, the policy is
#   controlled by the client. Note that setting the property to false
#   will break standards compliance.
#
(forbidden)overwriteEnabled = Use dcache.enable.overwrite
(one-of?true|false)dcache.enable.overwrite = true

#  ---- Whether space reservation should be supported.
#
#   Whether to support space reservations in this dCache instance. This
#   controls whether services expect a space manager to operate. You
#   still need to instantiate the spacemanager service by adding it to
#   the layout file on one of the dCache nodes (preferrably in the same
#   domain as the poolmanager service).
#
(one-of?true|false)dcache.enable.space-reservation=false

#  ---- Upload directory
#
#   Some protocols (currently just SRM) allow a client to upload a file and, once
#   satisfied with the file's contents, make the new or updated file "live" in an
#   atomic operation. Such uploads may be aborted before the final step without
#   there being any noticeable effect for other users.
#
#   To achieve this, dCache will point clients to upload files beneath the
#   dcache.upload-directory directory, which must be owned by root and have
#   permission mask 711.  The directory is created automatically if it does not
#   exist and must be accessible through all doors used for SRM uploading.
#
#   If this property is set to an absolute path, it is interpreted as an absolute
#   path in dCache's name space. If this directory is not exposed by a door, that
#   door cannot be used for upload by SRM. This would happen if a non-default root
#   directory has been defined for a door, or if a non-default root directory
#   has been defined for users.
#
#   There are three ways to resolve this problem:
#
#   - Change dcache.upload-directory to a directory that is within a part of
#     the name space exposed by all doors needed for SRM and for all accounts
#     using SRM. E.g. if
#
#           /pnfs/example.org/data
#
#     is the root of all your doors and all your accounts, then setting
#
#           dcache.upload-directory = /pnfs/example.org/data/upload
#
#     is the best solution. This needs to be done for pnfsmanager and all
#     doors.
#
#     If accounts have individual root directories, then this solution may not
#     be suitable.
#
#   - Add additional FTP doors for the SRM configured with
#
#        ftp.root = /
#
#     or
#
#        ftp.root = ${ftp.authz.upload-directory}
#
#     This will expose the upload directory and SRM will automatically
#     prefer these for uploads. This could be done in the same domain as
#     existing doors using a non-standard TCP port.
#
#   - Defined a relative upload directory. If this property is defined to
#     a relative path, it is interpreted relative to the account's root
#     directory. It will thus appear in the name space exposed by the FTP
#     door. There are two downsides to this:
#
#       * The upload directory may conflict with user files and directories.
#
#       * There will be several upload directories scattered throughout the
#         name space. This may make it more difficult to clean up in case
#         dCache fails to remove temporary upload directories.
#
dcache.upload-directory=/upload

#  -----------------------------------------------------------------------
#          Database Configuration
#  -----------------------------------------------------------------------
#
#   The current setup assumes that one or more PostgreSQL servers are
#   used by the various dCache components.  Database user and database
#   password are configurable. The dCache components use the databases 'dcache',
#   'replicas', 'companion' and 'billing'.  However, these might be located on
#   separate hosts.
#
#   The most performant configuration is to have the database server
#   running on the same host as the dCache component that will
#   access it.  Therefore, the default value for all the following
#   variables is 'localhost'.  Uncomment and change these variables
#   only if you have a reason to deviate from this scheme.
#
#   For example, one valid deployment would be to put the 'billing'
#   database on different host than the pnfs server database and
#   companion, but keep the httpDomain on the admin host.

#  ---- Whether to manage database schemas automatically
#
#   When true, database schemas will be automatically updated when
#   needed. Not all services support this setting. This settings
#   applies to a complete domain and must not be defined at the
#   service level.
#
(one-of?true|false)dcache.db.schema.auto=true


#  -----------------------------------------------------------------------
#       Tape protection
#  -----------------------------------------------------------------------
#
#   The    tape   protection    feature   is    only    available   if
#   dcache.authz.staging  is   defined,   and  there  is  a
#   similarly  named file  containing a  list of  FQANs and  DNs whose
#   owners are allowed to stage files (i.e., to read files from dCache
#   that are stored only on tape).
#
#   Stage configuration can  be provided either on the  door or on the
#   PoolManager as described in the following two cases below:
#
#      1) stage configuration provided on the door
#         (remember to repeat the same configuration on each door):
#         dcache.authz.staging.pep=doors
#      2) stage configuration provided on the PoolManager:
#         dcache.authz.staging.pep=PoolManager
#
(forbidden)stageConfigurationFilePath = Use dcache.authz.staging
(forbidden)stagePolicyEnforcementPoint = Use dcache.authz.staging.pep
dcache.authz.staging =
(one-of?doors|PoolManager)dcache.authz.staging.pep = doors


#   Location of a file that records all started domains.  This allows
#   dCache to discover orphaned domains.
dcache.started-domains-list = ${dcache.paths.config}/domains

#  -----------------------------------------------------------------------
#         Provide information about message broker
#  -----------------------------------------------------------------------
#
#   The following properties provide information about the broker
#   domain.  The actual domain is defined by dcache.broker.domain.
#
(immutable)dcache.broker.net.ports.tcp-when-scheme-is-cells=${dcache.broker.messaging.port}
(immutable)dcache.broker.net.ports.udp-when-scheme-is-cells=${dcache.broker.port} ${dcache.broker.client.port}
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-cells=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-cells=${dcache.broker.client.port}

(immutable)dcache.broker.net.ports.tcp-when-scheme-is-amq=
(immutable)dcache.broker.net.ports.udp-when-scheme-is-amq=
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-amq=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-amq=

(immutable)dcache.broker.net.ports.tcp-when-scheme-is-amq-embedded=${dcache.broker.amq.port} ${dcache.broker.amq.ssl.port}
(immutable)dcache.broker.net.ports.udp-when-scheme-is-amq-embedded=
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-amq-embedded=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-amq-embedded=

(immutable)dcache.broker.net.ports.tcp-when-scheme-is-cells+amq-embedded=${dcache.broker.amq.port} ${dcache.broker.amq.ssl.port} ${dcache.broker.messaging.port}
(immutable)dcache.broker.net.ports.udp-when-scheme-is-cells+amq-embedded=${dcache.broker.port} ${dcache.broker.client.port}
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-cells+amq-embedded=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-cells+amq-embedded=${dcache.broker.client.port}

(immutable)dcache.broker.net.ports.tcp-when-scheme-is-openmq=${dcache.broker.openmq.port}
(immutable)dcache.broker.net.ports.udp-when-scheme-is-openmq=
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-openmq=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-openmq=

(immutable)dcache.broker.net.ports.tcp-when-scheme-is-cells+openmq=${dcache.broker.openmq.port} ${dcache.broker.messaging.port}
(immutable)dcache.broker.net.ports.udp-when-scheme-is-cells+openmq=${dcache.broker.port} ${dcache.broker.client.port}
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-cells+openmq=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-cells+openmq=${dcache.broker.client.port}

(immutable)dcache.broker.net.ports.tcp-when-scheme-is-none=
(immutable)dcache.broker.net.ports.udp-when-scheme-is-none=
(immutable)dcache.non-broker.net.ports.tcp-when-scheme-is-none=
(immutable)dcache.non-broker.net.ports.udp-when-scheme-is-none=

(immutable)dcache.broker.net.ports.tcp=${dcache.broker.net.ports.tcp-when-scheme-is-${dcache.broker.scheme}}
(immutable)dcache.broker.net.ports.udp=${dcache.broker.net.ports.udp-when-scheme-is-${dcache.broker.scheme}}
(immutable)dcache.non-broker.net.ports.tcp=${dcache.non-broker.net.ports.tcp-when-scheme-is-${dcache.broker.scheme}}
(immutable)dcache.non-broker.net.ports.udp=${dcache.non-broker.net.ports.udp-when-scheme-is-${dcache.broker.scheme}}


