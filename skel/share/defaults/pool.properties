#  -----------------------------------------------------------------------
#     Default values for pools
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# Pool name
#
# Must be unique within this dCache instance
(forbidden)name = Use pool.name
pool.name =

# Path to pool directory
(forbidden)path = Use pool.path
pool.path =

#  ---- Mover queues to create on a pool
#
#   Mover queues schedule and execute transfers on a pool. Each mover
#   queue can have individual limits and timeouts. These are
#   configured at runtime through the admin interface.
#
#   Doors can be configured to submit transfers to named queues.
#
#   This property takes a comma separated list of named mover queues.
#   The default mover queue is called 'regular' and is always created.
#   The 'regular' mover queue must not be defined in this property.
#
#   Named queues with names that begin with a hyphen are processed in
#   LIFO order; all other queues are process in FIFO order.
#
(forbidden)poolIoQueue = Use pool.queues
pool.queues =

#  ---- Large File Store
#
#   Legacy option for disk only pools. There is usually no need to
#   change this setting as the choice whether to write a file to tape
#   is now controlled by the retention policy of each file.
#
(forbidden)lfs = Use pool.lfs
(one-of?|volatile|transient|precious|none)pool.lfs=none

#  ---- Maximum amount of space to be used by a pool
#
#   In bytes or 'Infinity'. May also be configured at runtime through
#   the admin interface. If 'Infinity', then the pool size is
#   determined from the size of the file system.
#
(forbidden)maxDiskSpace = Use pool.size
pool.size = Infinity

#  ---- Pool tags
#
#   White space separated list of key value pairs to associate with a
#   pool.
#
(forbidden)tags = Use pool.tags
pool.tags = hostname=${host.name}

#  ---- Command to execute periodically to check pool health
#
#   If defined and if pool.enable.repository-check is set to true, the
#   command is executed once a minute. The command is usually a script
#   that checks file system, disk array and host health. Any arguments
#   are passed along.
#
#   As the command is executed frequently, it should not perform any
#   expensive checks, nor should the check take longer than at most a
#   few seconds.
#
#   If the exit code is 0, the pool is assumed to be okay. If the exit
#   code is 1, the pool is marked read-only. Any other exit code will
#   disabled the pool.
#
#   Once marked read-only or disabled, the pool will not reenable
#   itself, even if subsequent invocations exit with 0. The pool can
#   manually be reenabled using the 'pool enable' admin shell command.
#
#   stdout and stderr of the command are written to the domain's log
#   file.
#
pool.check-health-command=

#  ---- Whether to monitor pool health
#
#   If true, then the pool periodically performs a number of health
#   checks and disables itself if an error is detected.
#
#   The health check also involves checking the amount of free space
#   in the file system and adjusting the pool size if the amount of
#   free space in the file system is less than the free space of the pool.
#
(forbidden)checkRepository = Use pool.enable.repository-check
(one-of?true|false)pool.enable.repository-check = true

# ---- Allow pool to remove precious files on request from cleaner.
#
#   This option is respected only when ${pool.lfs} is 'none'. If
#   ${pool.lfs} is 'precious' then removal of precious files is always
#   allowed.
#
(forbidden)allowCleaningPreciousFiles = Use pool.enable.remove-precious-files-on-delete
(one-of?true|false)pool.enable.remove-precious-files-on-delete = true

# Worker thread pool size. Used by migration module and for pool to pool transfers.
pool.limits.worker-threads=5

# Pool cell name. Currently this has to be the same as the pool name.
pool.cell.name=${pool.name}

#  ---- Whether to export the pool cell as a well known cell
#
#  This property controls whether the pool cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)pool.cell.export=true

# Cell message processing limits
pool.cell.limits.message.threads.min=5
pool.cell.limits.message.threads.max=50
pool.cell.limits.message.threads.max-idle-time=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.cell.limits.message.threads.max-idle-time.unit=SECONDS
pool.cell.limits.message.queue.max=1000

#  ---- Do not start the pool until specified paths exists.
#
#   If specified then pool startup procedure will block as long as
#   specified paths does not exists. This is useful to delay pool startup
#   until repository's directory is available.
#
#   Format: [path1][:path2]...[:pathN]
#   For example:
#      pool.wait-for-files=${pool.path}/data
#
(forbidden)waitForFiles = Use pool.wait-for-files
pool.wait-for-files=

#  ---- Which meta data repository implementation to use.
#
#   This selects which meta data repository implementation to use.
#   This is essentially a choice between storing meta data in a large
#   number of small files in the control/ directory, or to use the
#   embedded Berkeley database stored in the meta/ directory.  Both
#   directories are within the pool directory.
#
(forbidden)metaDataRepository = Use pool.plugins.meta
(one-of?org.dcache.pool.repository.meta.file.FileMetaDataRepository|\
        org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository)\
pool.plugins.meta = org.dcache.pool.repository.meta.file.FileMetaDataRepository

#  ---- Garbage collector used when the pool runs out of space
(forbidden)sweeper = Use pool.plugins.sweeper
pool.plugins.sweeper = org.dcache.pool.classic.SpaceSweeper2

#
# Whether to enable RPCSEC_GSS for NFS mover
#
(one-of?true|false)pool.mover.nfs.rpcsec_gss = false

#  ---- Port used for passive DCAP movers
#
#   When pool.mover.dcap.port is zero then a random port is taken from
#   pool.mover.dcap.port-range.
#
(forbidden)pool.dcap.port = Use pool.mover.dcap.port
pool.mover.dcap.port = 0

#   The range of acceptable port numbers when selecting a random port.
#   The format is <lowest-valid-port>:<highest-valid-port>.  This
#   property only has affect when pool.mover.dcap.port is zero.
#
pool.mover.dcap.port-range = ${dcache.net.lan.port.min}:${dcache.net.lan.port.max}

#  ----- Whether to use memory mapping in FTP mover
#
#   If true, the FTP mover utilizes memory mapping for checksum
#   verification. This potentially improves performance, but may cause
#   compatibility issues on some platforms.
#
(forbidden)gsiftpAllowMmap = Use pool.mover.ftp.mmap
(one-of?true|false)pool.mover.ftp.mmap = false

#  ----- Distance between transfer and checksum computation in FTP mover
#
#   When the checksum is computed on the fly, the FTP mover performs
#   the checksum calculation in a separate thread. This property
#   indicates the maximum distance in bytes between the transfer and
#   the checksum calculation. If too small then the transfer may be
#   throttled by a slow checksum calculation. If too large then data
#   may have to be read back from disk rather than read from the
#   cache.
#
(forbidden)gsiftpReadAhead = Use pool.mover.ftp.read-ahead
pool.mover.ftp.read-ahead = 16777216

# Whether the FTP mover may accept incoming connections. If not, passive
# FTP connections will use the door as a proxy.
(one-of?true|false)pool.mover.ftp.allow-incoming-connections=true

#  ---- Thread pool size for xrootd disk IO threads
(forbidden)xrootdMoverDiskThreads = Use pool.mover.xrootd.disk-threads
(deprecated)pool.mover.xrootd.disk-threads = 20
pool.mover.xrootd.threads = ${pool.mover.xrootd.disk-threads}

#  ---- Maximum size of an xrootd frame
#
#   Specified in bytes.
#
(forbidden)xrootdMoverMaxFrameSize = Use pool.mover.xrootd.frame-size
pool.mover.xrootd.frame-size = 2097152

#  ---- Xrootd plugins
#
#   Comma separated list of plugins to inject into the xrootd
#   request processing chain.
#
#   dCache ships with a few plugins:
#
#    authn:gsi  - any xrootd request to the door will use a key-exchange
#                 process to identify the end-user (pool only).
#
#    authz:alice-token - ALICE token based authorization plugin.
#
#    access-log - generates a dCache style access log using the NetLogger
#                 format. Read and write requests are logged at debug
#                 level to avoid generating too many log messages.
#
#   No plugins are required. If an authentication plugin is
#   specified, then note that the subject will *not* be mapped by
#   gPlazma.
#
#   Pools authorize access using a one-time token generated by the door
#   when redirecting the client to the pool. For this reason an
#   authentication or authorization plugin is usually *not* needed
#   on pools.
#
#   Third party plugins can be used by adding the plugin to the plugin
#   directory of dCache and specifying the plugin name here. Authentication
#   and authorization plugins can be loaded as authn:<plugin> and
#   authz:<plugin> respectively.
#
pool.mover.xrootd.plugins=

#  ---- Xrootd mover-idle timeout
#
#   Specifies the timeout before clients that connect to the
#   pool request handler but don't open any files will be disconnected.
#
(forbidden)xrootd.mover.timeout.idle = Use pool.mover.xrootd.timeout.idle
pool.mover.xrootd.timeout.idle = 300000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.xrootd.timeout.idle.unit=MILLISECONDS

#  ---- Xrootd connect timeout
#
#   Timeout that the mover will wait for a client connection before
#   shutting down.
#
pool.mover.xrootd.timeout.connect = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.xrootd.timeout.connect.unit = SECONDS

#  ---- Xrootd mover port range
pool.mover.xrootd.port.min = ${dcache.net.lan.port.min}
pool.mover.xrootd.port.max = ${dcache.net.lan.port.max}

#  ---- Thread pool size for http disk IO threads
(forbidden)httpMoverDiskThreads = Use pool.mover.http.threads
(deprecated)pool.mover.http.disk-threads = 20
pool.mover.http.threads = ${pool.mover.http.disk-threads}


#  ----- Chunk size in bytes for chunked HTTP packages sent by the server
(forbidden)httpMoverChunkSize = Use pool.mover.http.chunk-size
pool.mover.http.chunk-size = 8192

#  ---- HTTP client timeout
#
#   Period after which a client will be disconnected if the
#   connection is idle (not reading or writing)
#
(forbidden)httpMoverClientIdleTimeout = Use pool.mover.http.timeout.idle
pool.mover.http.timeout.idle = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.http.timeout.idle.unit = SECONDS

#  ---- HTTP connect timeout
#
#   Timeout that the mover will wait for a client connection before
#   shutting down
#
(forbidden)httpMoverConnectTimeout = Use pool.mover.http.timeout.connect
pool.mover.http.timeout.connect = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.http.timeout.connect.unit = SECONDS

#  ---- HTTP mover port range
pool.mover.http.port.min = ${dcache.net.wan.port.min}
pool.mover.http.port.max = ${dcache.net.wan.port.max}

#  ---- Directory containing trusted CA certificates
#
#   The directory containing the certificate authority (CA)
#   certificates that the pool should trust when accepting or making
#   remote connections.  Currently only secure HTTP (https)
#   connections react to this property.
#
pool.authn.capath = ${dcache.authn.capath}


# Cell address of pnfsmanager service
pool.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
pool.service.pnfsmanager.timeout=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.pnfsmanager.timeout.unit=SECONDS

# Cell address of billing service
pool.service.billing=${dcache.service.billing}

# Timeout for requests to other pools
pool.service.pool.timeout=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.pool.timeout.unit=SECONDS

# Maximum number of pnfs manager requests per second
pool.service.pnfsmanager.rate=250

# Cell address of poolmanager service
pool.service.poolmanager=${dcache.service.poolmanager}

# Timeout for poolmanager requests
pool.service.poolmanager.timeout=120
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.poolmanager.timeout.unit=SECONDS

# Cell address of pinmanager service
pool.service.pinmanager=${dcache.service.pinmanager}

# Timeout for pinmanager requests
pool.service.pinmanager.timeout=120
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.pinmanager.timeout.unit=SECONDS


# Timeout for requests to sent to doors
pool.service.door.timeout=3
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.door.timeout.unit=SECONDS

# Address of cell to notify after a file was flushed to tape
(forbidden)flushMessageTarget = Use pool.destination.flush-notification
pool.destination.flush-notification = broadcast

# Address of cell to notify with poolup messages
(forbidden)poolupDestination = Use pool.destination.heartbeat
pool.destination.heartbeat = broadcast

# Address of cell to notify with a replication request on arrival of new files
#
# This will typically be PoolManager or HoppingManager. Leave empty to disable the
# notification.
(forbidden)replicateOnArrival = Use pool.destination.replica
pool.destination.replicate =

# IP address to include in replication requests
#
# This will typically be an IP address of a worker node or some other client machine.
#
pool.destination.replicate.ip=

#
#   Document which TCP ports are opened
#
(immutable)pool.net.ports.tcp=${dcache.net.wan.port.min}-${dcache.net.wan.port.max} ${dcache.net.lan.port.min}-${dcache.net.lan.port.max}

# Obsolete properties
(forbidden)httpMoverSocketThreads = See pool.mover.http.threads
(forbidden)pool.mover.http.socket-threads = See pool.mover.http.threads
(forbidden)httpMoverConnectionMaxMemory = No longer used
(obsolete)pool.mover.http.memory-per-connection = No longer used
(forbidden)httpMoverMaxMemory = No longer used
(obsolete)pool.mover.http.memory = No longer used
(forbidden)xrootdMoverSocketThreads = See pool.mover.xrootd.threads
(forbidden)pool.mover.xrootd.socket-threads = See pool.mover.xrootd.threads
(forbidden)xrootdMoverMaxMemoryPerConnection = No longer used
(obsolete)pool.mover.xrootd.memory-per-connection = No longer used
(forbidden)xrootdMoverMaxMemory = No longer used
(obsolete)pool.mover.xrootd.memory = No longer used
