#  -----------------------------------------------------------------------
#     Default values for DCAP doors
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# Cell names for DCAP doors
dcap.cell.name=${dcap.cell.name.${dcap.authn.protocol}}
dcap.cell.name.plain=DCap-${host.name}
dcap.cell.name.auth=DCap-auth-${host.name}
dcap.cell.name.gsi=DCap-gsi-${host.name}
dcap.cell.name.kerberos=DCap-Kerberos-${host.name}
dcap.cell.name.dir=dirLookupPool

#  ---- Named queues to subscribe to
#
#   A service can consume messages from named queues. Other service can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
dcap.cell.consume = ${dcap.cell.name}
dcap.cell.subscribe=${dcache.loginbroker.request-topic},${dcap.topic.upload-cancelled}

# Authentication protocol
(one-of?plain|auth|kerberos|gsi)dcap.authn.protocol=plain

# Password authentication file for password authenticated dcap
dcap.authn.passwd = ${dcache.paths.etc}/passwd4dCapDoor

# Kerberos settings for kerberos authentication
dcap.authn.kerberos.service-principle-name=host/${host.fqdn}@${dcache.authn.kerberos.realm}
dcap.authn.kerberos.key-distribution-center-list=${dcache.authn.kerberos.key-distribution-center-list}

# Path to host certificate for gsi authentication
dcap.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Path to host key for gsi authentication
dcap.authn.hostcert.key=${dcache.authn.hostcert.key}

# Path to directory containing trusted CA certificates (with hashed file names) for gsi authentication
dcap.authn.capath=${dcache.authn.capath}

# Path to directory containing attribute validation information for authorized VOMS servers for gsi authentication
(obsolete)dcap.authn.vomsdir = This is can be configured in gPlazma

# ---- Certificate Authority Namespace usage mode
(one-of?GLOBUS_EUGRIDPMA|EUGRIDPMA_GLOBUS|GLOBUS|EUGRIDPMA|GLOBUS_EUGRIDPMA_REQUIRE|EUGRIDPMA_GLOBUS_REQUIRE|GLOBUS_REQUIRE|EUGRIDPMA_REQUIRE|EUGRIDPMA_AND_GLOBUS|EUGRIDPMA_AND_GLOBUS_REQUIRE|IGNORE|${dcache.authn.namespace-mode})\
dcap.authn.namespace-mode=${dcache.authn.namespace-mode}

# ---- Certificate Revocation List usage mode
(one-of?REQUIRE|IF_VALID|IGNORE|${dcache.authn.crl-mode})\
dcap.authn.crl-mode=${dcache.authn.crl-mode}

# ---- On-line Certificate Status Protocol usage mode
(one-of?REQUIRE|IF_AVAILABLE|IGNORE|${dcache.authn.ocsp-mode})\
dcap.authn.ocsp-mode=${dcache.authn.ocsp-mode}

#  Flags to disable problematic crypto ciphers
#
#  See dcache.authn.ciphers for details.
dcap.authn.ciphers =${dcache.authn.ciphers}

# GSI Delegation key pair caching lifetime
dcap.authn.gsi.delegation.cache.lifetime = ${dcache.authn.gsi.delegation.cache.lifetime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.gsi.delegation.cache.lifetime.unit})\
dcap.authn.gsi.delegation.cache.lifetime.unit = ${dcache.authn.gsi.delegation.cache.lifetime.unit}

# Whether to allow existing files to be truncated on open.
(one-of?true|false)dcap.authz.truncate = false

# Level of anonymous (unauthenticated) access allowed through a dcap door
(one-of?NONE|READONLY|FULL)dcap.authz.anonymous-operations = NONE

# Whether the dcap door is read-only
(one-of?true|false)dcap.authz.readonly = false

# Authorization file for tape protection (only used if the policy enforcement point is in doors)
dcap.authz.staging=${dcache.authz.staging}

# Where to put the policy enforcement point (PEP) for stage authorization
(one-of?doors|PoolManager|${dcache.authz.staging.pep})dcap.authz.staging.pep=${dcache.authz.staging.pep}

# Whether a dcap client is allowed to override which mover queue on
# the pool is used to schedule a request.
(one-of?true|false)dcap.authz.mover-queue-overwrite = false

# TCP port to listen to
dcap.net.port=${dcap.net.port.${dcap.authn.protocol}}
dcap.net.port.plain=22125
dcap.net.port.gsi=22128
dcap.net.port.auth=22129
dcap.net.port.kerberos=22725

# IP address of network interface to listen to
dcap.net.listen=${dcache.net.listen}

# Pool mover queue to use for transfers by this door
dcap.mover.queue =

# Maximum number of concurrent DCAP transfers on this door
dcap.limits.clients = 1500

# Cell address of pnfsmanager service
dcap.service.pnfsmanager=${dcache.service.pnfsmanager}

# Cell address of gplazma service
dcap.service.gplazma=${dcache.service.gplazma}

# Cell address of billing service
dcap.service.billing=${dcache.service.billing}

# Cell address of spacemanager service
dcap.service.spacemanager=${dcache.service.spacemanager}

# Cell address of pinmanager service
dcap.service.pinmanager=${dcache.service.pinmanager}

# Cell address of poolmanager service
dcap.service.poolmanager=${dcap.service.poolmanager-space-${dcap.enable.space-reservation}}
(immutable)dcap.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)dcap.service.poolmanager-space-true=${dcache.service.spacemanager}

# Whether to support space reservations
(one-of?true|false|${dcache.enable.space-reservation})dcap.enable.space-reservation=${dcache.enable.space-reservation}

#  Topic on which to receive upload cancellations
dcap.topic.upload-cancelled = ${dcache.topic.upload-cancelled}

# Information for loginbroker registration
dcap.loginbroker.update-topic=${dcache.loginbroker.update-topic}
dcap.loginbroker.request-topic=${dcache.loginbroker.request-topic}
dcap.loginbroker.tags=${dcache.loginbroker.tags}
dcap.loginbroker.update-period=${dcache.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
  dcap.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
dcap.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
dcap.loginbroker.family=${dcap.loginbroker.family.${dcap.authn.protocol}}
dcap.loginbroker.family.plain=dcap
dcap.loginbroker.family.auth=dcap
dcap.loginbroker.family.gsi=gsidcap
dcap.loginbroker.family.kerberos=dcap
dcap.loginbroker.version=1.3.0

#
#   Document which TCP ports are opened
#
(immutable)dcap.net.ports.tcp=${dcap.net.port}

(obsolete)dcap.cell.export = See dcap.cell.consume
