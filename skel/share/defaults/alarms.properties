#  -----------------------------------------------------------------------
#     Default values for embedded alarm server
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of the alarm service
#
alarms.cell.name=alarms

#  ---- Host on which this service is running
alarms.net.host=${dcache.log.server.host}

#  ---- TCP port the alarms service listens on
alarms.net.port=${dcache.log.server.port}

#  ---- Main alarms area
#
alarms.dir=@dcache.paths.alarms@

#  ---- Logback configuration for the alarm server
#
(obsolete)alarms.server.config = Alarms server no longer has a special configuration.
(obsolete)alarms.log.config.path = ${alarms.dir}/logback-server.xml

#  ---- Server root log level.
#
(forbidden)alarms.server.log.level = Use alarms.log.root-level
(one-of?off|error|warn|info|debug)alarms.log.root-level=warn

#  ---- Server side custom alarm definitions
#
#      Definitions can be added to this file; it is referenced by the
#      alarm server's logback file (see the LogEntryAppender)
#
(deprecated)alarms.definitions.path=${alarms.dir}/alarms-custom-definitions.xml
alarms.custom-definitions.path=${alarms.definitions.path}

#  ---- Server side file for recording customized priority mappings
#       written as a simple properties file.
#
alarms.priority-mapping.path=${alarms.dir}/alarms-priority.properties

#  ---- Default value to give to alarm priority
#
(one-of?critical|high|moderate|low)alarms.priority-mapping.default=critical

#  ---- Concurrency.  Number of worker threads for processing incoming
#       logging events.
#
alarms.limits.workers=1

#  ---- SMTP email forwarding property
#
#      Whether or not to send email alerts of alarms.
#      If this property is false, the email appender will be skipped.
#
#      If you wish alarms to be sent as email, you will need to configure
#      the following SMTP email properties.  For further information,
#      see also http://logback.qos.ch/manual/appenders.html.
#
(one-of?true|false)alarms.enable.email=false

#  ---- SMTP email forwarding property
#
#      The host name of the SMTP server. This parameter is mandatory
#      if email is enabled.
#
alarms.email.smtp-host=

#  ---- SMTP email forwarding property
#
#      The port where the SMTP server is listening.
#
#      Internally set default is also 25.
#
alarms.email.smtp-port=25

#  --------------------------------------------------------------------------
#       SMTP email authentication and encryption
#
#       The SMTP client used by dCache supports authentication via plain
#       user passwords as well as both the STARTTLS and SSL protocols.
#       Note that STARTTLS differs from SSL in that, in STARTTLS,
#       the connection is initially non-encrypted and only after the
#       STARTTLS command is issued by the client (if the server supports it)
#       does the connection switch to SSL. In SSL mode, the connection is
#       encrypted right from the start. Which of these to use is usually
#       determined by the server.
#
#       If username and password are left undefined, unauthenticated sends
#       will be attempted, which may not be supported by the server.
#  --------------------------------------------------------------------------

#  ---- SMTP email forwarding property
#
#      If this parameter is set to true, then this appender will issue the
#      STARTTLS command (if the server supports it) causing the connection
#      to switch to SSL. Note that the connection is initially non-encrypted.
#
#      Internally set default is also false.
#
alarms.email.start-tls=false

#  ---- SMTP email forwarding property
#
#      If this parameter is set to true, then this appender will open an
#      SSL connection to the server.
#
#      Internally set default is also false.
#
alarms.email.ssl=false

#  ---- SMTP email forwarding property
#
#      The username value to use during plain user/password authentication.
#      Internal default is also undefined.
#
alarms.email.user=

#  ---- SMTP email forwarding property
#
#      The password value to use for plain user/password authentication.
#      Internal default is also undefined.
#      NOTE:  while using SSL will guarantee encryption over the wire,
#      there is currently no way of storing an encrypted password in this file.
#
#      Two possible workarounds to this:
#
#          a.  Set up an admin account with a plaintext password that
#              is protected by root privileges but which can be shared among
#              adminstrators or those with access to the host containing this
#              file;
#
#          b.  Set up a host-based authentication to the server; the email
#              admin will usually require the client IP, and it will need
#              to be static in that case.
#
alarms.email.password=

#  ---- SMTP email forwarding property
#
#      A comma-separated list of recipient email addresses.
#
alarms.email.to=

#  ---- SMTP email forwarding property
#
#      The originator of the email messages sent. If you wish to include the
#      sender's name, then use the format "John Q. Public<public@example.org>".
#
alarms.email.from=

#  ---- SMTP email forwarding property
#
#      Subject of the email sent.
#
alarms.email.subject=dCache Alarm

#  ---- SMTP email forwarding property
#
#      The client buffers outgoing alarms.  The max number of alarms in
#      given message is determined by the buffer size, which has an upper
#      limit of 256.  This is the internal default.  It is set to 1
#      here to enforce a single alarm per email message.
#
alarms.email.buffer-size=1

#  ---- Level of priority serving as threshold for sending an email
#       notification.  All alerts at this level or above trigger an email.
(one-of?critical|high|medium|low)alarms.email.threshold=critical

#  ---- Pattern to use to encode email alert.
#
alarms.email.encoding-pattern=%d{dd MMM yyyy HH:mm:ss} %marker \\(%X{host}\\)\\(%X{service}\\)\\(%X{domain}\\) %m%n

#  ---- Level of priority serving as threshold for logging history entry.
#       All alerts at this level or above are logged to the history file.
(one-of?critical|high|medium|low)alarms.history.threshold=critical

#  ---- Pattern to use to encode history log entry.
#
alarms.history.encoding-pattern=%d{dd MMM yyyy HH:mm:ss} %marker \\(%X{host}\\)\\(%X{service}\\)\\(%X{domain}\\) %m%n

#  ---- Path of history log file
#
alarms.history.log-path=${alarms.dir}/history.log

#  ---- Pattern to use for rolling log file
#
alarms.history.log-file.pattern=history.%i.log

#  ---- Max size before history log is rolled.
#
alarms.history.max-file-size=8MB

#  ---- Min index for saved history logs
#
alarms.history.min-index=1

#  ---- Max index for saved history logs
#
alarms.history.max-index=3

#  ---- Defines what kind of database (currently either XML or Postgres)
#       "off" deactivates all attempted connections to the store
#
(forbidden)alarms.store.db.type = Use alarms.db.type
(one-of?off|xml|rdbms)alarms.db.type=off

#  ---- Only store alarms to the persistent store.
#
(one-of?true|false)alarms.db.alarms-only=false

# ---- XML database
#
#   default implementation of alarms storage uses an XML DataNucleus
#   plugin; this path defines the location of the XML file
#
(forbidden)alarms.store.path = Use alarms.db.xml.path
alarms.db.xml.path = ${alarms.dir}/store.xml

# ---- RDBMS type
#      must be a database type tag recognized by DataNucleus, where
#      "jdbc:${alarms.db.rdbms.type}"
#      is a valid schema for the connection URL;
#      if this value is changed from its default ('postgresql')
#
(forbidden)alarms.store.db.rdbms = Use alarms.db.rdbms.type
alarms.db.rdbms.type = postgresql

# ---- RDBMS/JDBC Database host name
#
(forbidden)alarms.store.db.host = Use alarms.db.host
alarms.db.host = localhost

# ---- RDBMS/JDBC Database user name
#
(forbidden)alarms.store.db.user = Use alarms.db.user
alarms.db.user = srmdcache

# ---- RDBMS/JDBC Database user password
#
(forbidden)alarms.store.db.pass = Use alarms.db.password
alarms.db.password =

# ---- RDBMS/JDBC Database name
#
(immutable)alarms.db.name-when-type-is-off=
(immutable)alarms.db.name-when-type-is-xml=
(immutable)alarms.db.name-when-type-is-rdbms=alarms
alarms.db.name=${alarms.db.name-when-type-is-${alarms.db.type}}

#  ---- Logging of alarms to plain-text history file
#
#      If running over an rdbms, this is usually not necessary.
#
(immutable)alarms.enable.history-when-type-is-off=false
(immutable)alarms.enable.history-when-type-is-xml=true
(immutable)alarms.enable.history-when-type-is-rdbms=false
(one-of?true|false)alarms.enable.history=${alarms.enable.history-when-type-is-${alarms.db.type}}

(obsolete)alarms.store.db.properties = database configuration is now mainly internal
(obsolete)alarms.db.datanucleus-properties.path = database configuration is now mainly internal

# ---- JDBC Url
#
(immutable)alarms.db.url-when-type-is-off=off
(immutable)alarms.db.url-when-type-is-xml=xml:file:${alarms.db.xml.path}
(immutable)alarms.db.url-when-type-is-rdbms=jdbc:${alarms.db.rdbms.type}://${alarms.db.host}/${alarms.db.name}
(forbidden)alarms.store.db.url=Use alarms.db.url
alarms.db.url=${alarms.db.url-when-type-is-${alarms.db.type}}

#  -----------------------------------------------------------------------
#     The following properties control a cleaner daemon responsible
#     for deleting stale alarm entries
#  -----------------------------------------------------------------------

#     Whether to run the thread which automatically removes closed alarms
#     older than a given threshold
#
(one-of?true|false)alarms.enable.cleaner = false

#     Wait interval between successive sweeps of the cleanup daemon
#
alarms.cleaner.timeout = 7
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)alarms.cleaner.timeout.unit = DAYS

#     Interval prior to the current (wake-up) time to use in
#     determining which closed alarms to discard (all such alarms with a
#     timestamp < current - threshold will be deleted)
#
alarms.cleaner.delete-entries-before = 14
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)alarms.cleaner.delete-entries-before.unit = DAYS

# ---- CHANGELOG (Liquibase)
#
alarms.db.schema.auto=${dcache.db.schema.auto}
(immutable)alarms.db.changelog-when-type-is-off=
(immutable)alarms.db.changelog-when-type-is-xml=
(immutable)alarms.db.changelog-when-type-is-rdbms=org/dcache/alarms/db/sql/alarms.changelog-master.xml
alarms.db.schema.changelog=${alarms.db.changelog-when-type-is-${alarms.db.type}}

#  Document which TCP ports are opened
(immutable)alarms.net.ports.tcp=${alarms.net.port}
