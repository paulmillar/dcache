# -----------------------------------------------------------------------
#    Default values for transfermanagers
# -----------------------------------------------------------------------
@DEFAULTS_HEADER@

transfermanagers.cell.name=RemoteTransferManager

#  ---- Whether to export the transfermanagers cells as a well known cell
#
#  This property controls whether the transgermanagers cells aret published
#  as well known cells. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)transfermanagers.cell.export=true

(forbidden)srmDbLogEnabled = Use transfermanagers.enable.db
(deprecated)transfermanagers.enable.log-to-database=false

# Timeout for pool requests
(forbidden)srmPoolTimeout = Use transfermanagers.service.pool.timeout
transfermanagers.service.pool.timeout = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.pool.timeout.unit=SECONDS

# Cell address of pnfsmanager service
transfermanagers.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
transfermanagers.service.pnfsmanager.timeout = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.pnfsmanager.timeout.unit = SECONDS

# Cell address of poolmanager service
transfermanagers.service.poolmanager=${transfermanagers.service.poolmanager-when-space-reservations-${transfermanagers.enable.space-reservation}}
(immutable)transfermanagers.service.poolmanager-when-space-reservations-false=${dcache.service.poolmanager}
(immutable)transfermanagers.service.poolmanager-when-space-reservations-true=${dcache.service.spacemanager}

# Timeout for poolmanager requests
transfermanagers.service.poolmanager.timeout = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.poolmanager.timeout.unit = SECONDS

# Cell address of spacemanager services
transfermanagers.service.spacemanager=${dcache.service.spacemanager}

# Cell address of billing service
transfermanagers.service.billing=${dcache.service.billing}

# Timeout for billing requests
transfermanagers.service.billing.timeout = 300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.billing.timeout.unit = SECONDS

# Maximum number of concurrent third party SRM copy transfers internal to this
# dCache instance. Internal transfers are those in which both the source and
# the destination is the local SRM.
(forbidden)remoteCopyMaxTransfers = Use transfermanagers.limits.internal-transfers
transfermanagers.limits.internal-transfers = 150

# Maximum number of concurrent third party SRM copy transfers between this
# dCache and another SRM.
(forbidden)remoteGsiftpMaxTransfers = Use transfermanagers.limits.external-transfers
transfermanagers.limits.external-transfers = 1000

# Mover queue
#
# The mover queue on the pool to which third party SRM copy transfers will be
# submitted. If blank, the default queue will be used.
(forbidden)remoteGsiftpIoQueue = Use transfermanagers.mover.queue
transfermanagers.mover.queue =

# Time limit on how long an SRM third party copy transfer may last
(forbidden)srmMoverTimeout = Use transfermanagers.limits.transfer-time
transfermanagers.limits.transfer-time = 7200
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.limits.transfer-time.unit=SECONDS


# Whether space reservations should be supported for third party SRM copy transfers.
(one-of?true|false)transfermanagers.enable.space-reservation=${dcache.enable.space-reservation}

# Database settings
(one-of?true|false)transfermanagers.enable.db=${transfermanagers.enable.log-to-database}
transfermanagers.db.host=localhost
transfermanagers.db.name=dcache
transfermanagers.db.user=srmdcache
transfermanagers.db.password=srmdcache
transfermanagers.db.password.file=
transfermanagers.db.url=jdbc:postgresql://${transfermanagers.db.host}/${transfermanagers.db.name}

# The transfermanagers service automatically manages its database schema
(immutable)transfermanagers.db.schema.auto=true

