#
#      FTP Door
#

onerror shutdown

check -strong port
check -strong cell.name
check -strong clientDataPortRange
check -strong gsiftpMaxLogin
check -strong ftp.service.loginbroker
check -strong ftp.service.loginbroker.update-period
check -strong ftp.service.loginbroker.update-period.unit
check -strong ftp.service.loginbroker.update-threshold
check -strong dcache.service.gplazma
check -strong dcache.service.billing
check -strong dcache.service.pnfsmanager
check -strong performanceMarkerPeriod
check -strong gsiftpPoolManagerTimeout
check -strong gsiftpPoolTimeout
check -strong gsiftpPnfsTimeout
check -strong gsiftpMaxRetries
check -strong gsiftpMaxStreamsPerClient
check -strong gsiftpDeleteOnConnectionClosed
check gsiftpPoolManager
check gsiftpIoQueue
check kpwdFile
check gsiftpAdapterInternalInterface
check -strong overwriteEnabled
check -strong ftp.proxy.on-passive
check -strong ftp.proxy.on-active
check -strong ftp.read-only
check FtpTLogDir
check ftp.net.listen

onerror continue

# Use gsiftpPoolManager if defined
define env usePoolManager end
set env -c myPoolManager ${gsiftpPoolManager}
end

eval "${gsiftpPoolManager}" "" !=
exec env usePoolManager -ifok

# Otherwise use space manager, if enabled
define env useSpaceManager end
  set env -c myPoolManager ${dcache.service.spacemanager}
end

eval ${srmSpaceManagerEnabled} true == ${srmSpaceManagerEnabled} on == || ${srmSpaceManagerEnabled} yes == || ${srmSpaceManagerEnabled} enabled == ||
exec env useSpaceManager -ifok

# Otherwise use poolmanager
set env -c myPoolManager ${dcache.service.poolmanager}

onerror shutdown

exec file:${dcache.paths.share}/cells/stage.fragment dcache doors
exec file:${dcache.paths.share}/cells/embedded-gPlazma.fragment

#  defaultStreamsPerClient must be 1 for compliance with GFD.21
create dmg.cells.services.login.LoginManager ${cell.name} \
            "${port} \
             -listen=${ftp.net.listen} \
             -export \
             diskCacheV111.doors.WeakFtpDoorV1 \
             -prot=raw \
             -clientDataPortRange=${clientDataPortRange} \
             -maxLogin=${gsiftpMaxLogin} \
             -brokerUpdateTime=${ftp.service.loginbroker.update-period} \
             -brokerUpdateTimeUnit=${ftp.service.loginbroker.update-period.unit} \
             -brokerUpdateOffset=${ftp.service.loginbroker.update-threshold} \
             -protocolFamily=ftp \
             -protocolVersion=1.0.0 \
             -loginBroker=${ftp.service.loginbroker} \
             -gplazma=\"${dcache.service.gplazma}\" \
             -billing=\"${dcache.service.billing}\" \
             -perfMarkerPeriod=${performanceMarkerPeriod} \
             -poolManager=${myPoolManager} \
             -poolManagerTimeout=${gsiftpPoolManagerTimeout} \
             -poolTimeout=${gsiftpPoolTimeout} \
             -pnfsManager={dcache.service.pnfsmanager} \
             -pnfsTimeout=${gsiftpPnfsTimeout} \
             -maxRetries=${gsiftpMaxRetries} \
             -maxStreamsPerClient=${gsiftpMaxStreamsPerClient} \
             -defaultStreamsPerClient=1 \
             -deleteOnConnectionClosed=${gsiftpDeleteOnConnectionClosed} \
             -use-login-service=${useLoginService} \
             -io-queue=${gsiftpIoQueue} \
             -kpwd-file=${kpwdFile} \
             -stageConfigurationFilePath=${dcache.authz.staging} \
             -ftp-adapter-internal-interface=${gsiftpAdapterInternalInterface} \
             -overwrite=${overwriteEnabled} \
             -proxyPassive=${ftp.proxy.on-passive} \
             -proxyActive=${ftp.proxy.on-active} \
             -tlog=${FtpTLogDir} \
             -read-only=${ftp.read-only} \
"

