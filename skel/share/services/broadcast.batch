#  -----------------------------------------------------------------------
#          Broadcast Cell
#  -----------------------------------------------------------------------

onerror shutdown
check -strong cell.name
check -strong srmSpaceManagerEnabled

#
#  ----  Registration of the Replica Manager
#
#   If replicaManager is on, it needs some messages broadcasted:
#   It is off by default
onerror continue
set context -c replicaManager no
define env replicaManagerOn.exe endExe
  set env -c broadcastSetupReplicaManager1 "register diskCacheV111.vehicles.PoolStatusChangedMessage       ${dcache.service.replica}"
  set env -c broadcastSetupReplicaManager2 "register diskCacheV111.vehicles.PnfsModifyCacheLocationMessage ${dcache.service.replica}"
  set env -c broadcastSetupReplicaManager3 "register diskCacheV111.vehicles.PoolRemoveFilesMessage         ${dcache.service.replica}"
endExe
eval ${replicaManager} yes ==
exec env replicaManagerOn.exe -ifok
set env -c broadcastSetupReplicaManager1 ""
set env -c broadcastSetupReplicaManager2 ""
set env -c broadcastSetupReplicaManager3 ""
onerror shutdown

#
# broadcast some messages to SpaceManager if enabled
#
onerror continue
define env spaceManager.exe endExe
  set env -c broadcastToSpaceManager1 "register diskCacheV111.vehicles.PoolFileFlushedMessage         ${dcache.service.spacemanager}"
  set env -c broadcastToSpaceManager2 "register diskCacheV111.vehicles.PoolRemoveFilesMessage         ${dcache.service.spacemanager}"
endExe
eval ${srmSpaceManagerEnabled} true == ${srmSpaceManagerEnabled} on == || ${srmSpaceManagerEnabled} yes == || ${srmSpaceManagerEnabled} enabled == ||
exec env spaceManager.exe -ifok
set env -c broadcastToSpaceManager1 ""
set env -c broadcastToSpaceManager2 ""
onerror shutdown

#
#  ----  The broadcast Setup
#
define context broadcastSetup endDefine

   ${broadcastSetupReplicaManager1}
   ${broadcastSetupReplicaManager2}
   ${broadcastSetupReplicaManager3}

   ${broadcastToSpaceManager1}
   ${broadcastToSpaceManager2}

   register diskCacheV111.vehicles.PoolRemoveFilesMessage         ${dcache.service.billing}

   register diskCacheV111.vehicles.PoolRemoveFilesMessage         ${dcache.service.pinmanager}
   register diskCacheV111.vehicles.PoolManagerPoolUpMessage       ${dcache.service.poolmanager}
endDefine

#
#  ----  Startup
#
create dmg.cells.services.multicaster.BroadcastCell ${cell.name}  \
          "default -export"
