#
#  Authenticated dCap  D o o r
#

onerror shutdown
check -strong cell.name
check -strong dcapMaxLogin
check -strong dcapIoQueueOverwrite
check -strong port
check -strong pnfsmanager
check -strong poolmanager
check -strong gplazma
check -strong srmSpaceManagerEnabled
check -strong loginBroker
check -strong truncate
check -strong dcache.paths.share
check -strong dcapReadOnly
check -strong dcapAnonymousAccessLevel
check dcapIoQueue
check dcapPasswdFile
check listen

onerror continue

define env useSpaceManager end
  set env -c myPoolManager ${spacemanager}
end

eval ${srmSpaceManagerEnabled} true == ${srmSpaceManagerEnabled} on == || ${srmSpaceManagerEnabled} yes == || ${srmSpaceManagerEnabled} enabled == ||
exec env useSpaceManager -ifok

# Otherwise use poolmanager
set env -c myPoolManager ${poolmanager}

onerror shutdown

exec file:${dcache.paths.share}/cells/stage.fragment doors
exec file:${dcache.paths.share}/cells/embedded-gPlazma.fragment

create dmg.cells.services.login.LoginManager ${cell.name} \
            "${port} \
             -listen=${listen} \
             -export \
             diskCacheV111.doors.DCapDoor \
             -keepAlive=300 \
             -poolRetry=2700 \
             -prot=telnet \
	     -pswdfile=${dcapPasswdFile} \
             -truncate=${truncate} \
             -maxLogin=${dcapMaxLogin} \
             -brokerUpdateTime=30 \
             -protocolFamily=dcap \
             -protocolVersion=1.3.0 \
             -pnfsManager=${pnfsmanager} \
             -poolManager=${myPoolManager} \
             -poolProxy=${myPoolManager} \
             -pinManager=PinManager \
             -gplazma=\"${gplazma}\" \
             -billing=billing \
             -stageConfigurationFilePath=${stageConfigurationFilePath} \
             -io-queue=${dcapIoQueue} \
             -io-queue-overwrite=${dcapIoQueueOverwrite} \
             -loginBroker=${loginBroker}  \
	     -read-only=${dcapReadOnly} \
	     -anonymous-access=${dcapAnonymousAccessLevel} \
	     -authorization=required \
"

